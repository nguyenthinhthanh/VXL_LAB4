
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002da8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002eb4  08002eb4  00003eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed8  08002ed8  00004078  2**0
                  CONTENTS
  4 .ARM          00000000  08002ed8  08002ed8  00004078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ed8  08002ed8  00004078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed8  08002ed8  00003ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002edc  08002edc  00003edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08002ee0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000078  08002f58  00004078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08002f58  00004264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e08  00000000  00000000  000040a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb7  00000000  00000000  0000cea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0000ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00002d75  00000000  00000000  0000fa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e007  00000000  00000000  00012775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00086345  00000000  00000000  0002077c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000a6ac1  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000008bd  00000000  00000000  000a6b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000304c  00000000  00000000  000a73c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000aa410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e9c 	.word	0x08002e9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002e9c 	.word	0x08002e9c

0800014c <setEnviromentState0>:

	setEnviromentState0();
	FSM_State = RED_GREEN_STATE_MODE1;*/
}

void setEnviromentState0(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	Set timer for scanning 7Seg for reset counter value
	setTimer(SEVENT_SEG_SCAN_TIMER, DURATION_FOR_SEVENT_SEG_SCAN_LED);

	setTimer(DELAY_TIMER, 0);
	setTimer(TRAFFIC_TIMER, 3000);*/
}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <setEnviromentState1>:

void setEnviromentState1(void){
 8000158:	b480      	push	{r7}
 800015a:	af00      	add	r7, sp, #0
	//Led24_Count = 2;
	//setTimer(TRAFFIC_TIMER, 2000);
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr

08000164 <setEnviromentState2>:
void setEnviromentState2(void){
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
	/*Led13_Count = 3;
	Led24_Count = 5;
	setTimer(TRAFFIC_TIMER, 3000);*/
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr

08000170 <setEnviromentState3>:

void setEnviromentState3(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*Led13_Count = 2;
	setTimer(TRAFFIC_TIMER, 2000);*/
}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <setEnviromentState4>:

void setEnviromentState4(void){
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	Ignore timer delay and timer traffic
	ignoreTimer(DELAY_TIMER);
	ignoreTimer(TRAFFIC_TIMER);

	activeTimer(SEVENT_SEG_SCAN_TIMER);*/
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <doState0>:
	Ignore timer delay and timer traffic
	ignoreTimer(DELAY_TIMER);
	ignoreTimer(TRAFFIC_TIMER);*/
}

void doState0(void){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	doRedGreen_Traffic();
 800018c:	f001 f956 	bl	800143c <doRedGreen_Traffic>

	if(getTimeFlag()){
 8000190:	f001 f9bc 	bl	800150c <getTimeFlag>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d00b      	beq.n	80001b2 <doState0+0x2a>

		/*Just for debug
		HAL_GPIO_WritePin(CHECK_GPIO_Port, CHECK_Pin, GPIO_PIN_RESET);*/

		display7SEG_13(Led13_Count);
 800019a:	4b07      	ldr	r3, [pc, #28]	@ (80001b8 <doState0+0x30>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4618      	mov	r0, r3
 80001a0:	f000 fa16 	bl	80005d0 <display7SEG_13>
		display7SEG_24(Led24_Count);
 80001a4:	4b05      	ldr	r3, [pc, #20]	@ (80001bc <doState0+0x34>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4618      	mov	r0, r3
 80001aa:	f000 fba1 	bl	80008f0 <display7SEG_24>
		Led24_Count--;*/

		//updateLedBuffer(0, Led13_Count);
		//updateLedBuffer(3, Led24_Count);

		clearTimeFlag();
 80001ae:	f001 f9b7 	bl	8001520 <clearTimeFlag>
	}
}
 80001b2:	bf00      	nop
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	20000018 	.word	0x20000018
 80001bc:	2000001c 	.word	0x2000001c

080001c0 <doState1>:

void doState1(void){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	doRedYellow_Traffic();
 80001c4:	f001 f960 	bl	8001488 <doRedYellow_Traffic>

	if(getTimeFlag()){
 80001c8:	f001 f9a0 	bl	800150c <getTimeFlag>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d00b      	beq.n	80001ea <doState1+0x2a>
		display7SEG_13(Led13_Count);
 80001d2:	4b07      	ldr	r3, [pc, #28]	@ (80001f0 <doState1+0x30>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 f9fa 	bl	80005d0 <display7SEG_13>
		display7SEG_24(Led24_Count);
 80001dc:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <doState1+0x34>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fb85 	bl	80008f0 <display7SEG_24>
		Led24_Count--;*/

		//updateLedBuffer(0, Led13_Count);
		//updateLedBuffer(3, Led24_Count);

		clearTimeFlag();
 80001e6:	f001 f99b 	bl	8001520 <clearTimeFlag>
	}
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000018 	.word	0x20000018
 80001f4:	2000001c 	.word	0x2000001c

080001f8 <doState2>:

void doState2(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	doGreenRed_Traffic();
 80001fc:	f001 f956 	bl	80014ac <doGreenRed_Traffic>

	if(getTimeFlag()){
 8000200:	f001 f984 	bl	800150c <getTimeFlag>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d00b      	beq.n	8000222 <doState2+0x2a>
		display7SEG_13(Led13_Count);
 800020a:	4b07      	ldr	r3, [pc, #28]	@ (8000228 <doState2+0x30>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f9de 	bl	80005d0 <display7SEG_13>
		display7SEG_24(Led24_Count);
 8000214:	4b05      	ldr	r3, [pc, #20]	@ (800022c <doState2+0x34>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fb69 	bl	80008f0 <display7SEG_24>
		Led24_Count--;*/

		//updateLedBuffer(0, Led13_Count);
		//updateLedBuffer(3, Led24_Count);

		clearTimeFlag();
 800021e:	f001 f97f 	bl	8001520 <clearTimeFlag>
	}
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000018 	.word	0x20000018
 800022c:	2000001c 	.word	0x2000001c

08000230 <doState3>:

void doState3(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	doYellowRed_Traffic();
 8000234:	f001 f954 	bl	80014e0 <doYellowRed_Traffic>

	if(getTimeFlag()){
 8000238:	f001 f968 	bl	800150c <getTimeFlag>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d00b      	beq.n	800025a <doState3+0x2a>
		display7SEG_13(Led13_Count);
 8000242:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <doState3+0x30>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f9c2 	bl	80005d0 <display7SEG_13>
		display7SEG_24(Led24_Count);
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <doState3+0x34>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fb4d 	bl	80008f0 <display7SEG_24>
		Led24_Count--;*/

		//updateLedBuffer(0, Led13_Count);
		//updateLedBuffer(3, Led24_Count);

		clearTimeFlag();
 8000256:	f001 f963 	bl	8001520 <clearTimeFlag>
	}
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000018 	.word	0x20000018
 8000264:	2000001c 	.word	0x2000001c

08000268 <fsm_automatic>:
		Time_LedGreen_Duration = Time_LedGreen_Duration_Temp;
		//setTimer(BLINKING_LED_GREEN_TIMER, (Time_LedGreen_Duration * TIME_SCALER)/2);
	}
}

void fsm_automatic(){
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	switch(FSM_State){
 800026c:	4b38      	ldr	r3, [pc, #224]	@ (8000350 <fsm_automatic+0xe8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b03      	cmp	r3, #3
 8000272:	d861      	bhi.n	8000338 <fsm_automatic+0xd0>
 8000274:	a201      	add	r2, pc, #4	@ (adr r2, 800027c <fsm_automatic+0x14>)
 8000276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027a:	bf00      	nop
 800027c:	0800028d 	.word	0x0800028d
 8000280:	080002bb 	.word	0x080002bb
 8000284:	080002e5 	.word	0x080002e5
 8000288:	0800030f 	.word	0x0800030f
		case RED_GREEN_STATE_MODE1:
			doState0();
 800028c:	f7ff ff7c 	bl	8000188 <doState0>

			if(state_traffic == RED_YELLOW_STATE){
 8000290:	4b30      	ldr	r3, [pc, #192]	@ (8000354 <fsm_automatic+0xec>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d104      	bne.n	80002a2 <fsm_automatic+0x3a>
				setEnviromentState1();
 8000298:	f7ff ff5e 	bl	8000158 <setEnviromentState1>
				FSM_State = RED_YELLOW_STATE_MODE1;
 800029c:	4b2c      	ldr	r3, [pc, #176]	@ (8000350 <fsm_automatic+0xe8>)
 800029e:	2201      	movs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]
			}

			if(is_button_pressed(0)){
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 f8b8 	bl	8000418 <is_button_pressed>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d046      	beq.n	800033c <fsm_automatic+0xd4>
				setEnviromentState4();	/*Mode 2*/
 80002ae:	f7ff ff65 	bl	800017c <setEnviromentState4>
				FSM_State = NORMAL_STATE_MODE_2;
 80002b2:	4b27      	ldr	r3, [pc, #156]	@ (8000350 <fsm_automatic+0xe8>)
 80002b4:	2204      	movs	r2, #4
 80002b6:	601a      	str	r2, [r3, #0]
			}
			break;
 80002b8:	e040      	b.n	800033c <fsm_automatic+0xd4>
		case RED_YELLOW_STATE_MODE1:
			doState1();
 80002ba:	f7ff ff81 	bl	80001c0 <doState1>

			if(state_traffic == GREEN_RED_STATE){
 80002be:	4b25      	ldr	r3, [pc, #148]	@ (8000354 <fsm_automatic+0xec>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d104      	bne.n	80002d0 <fsm_automatic+0x68>
				setEnviromentState2();
 80002c6:	f7ff ff4d 	bl	8000164 <setEnviromentState2>
				FSM_State = GREEN_RED_STATE_MODE1;
 80002ca:	4b21      	ldr	r3, [pc, #132]	@ (8000350 <fsm_automatic+0xe8>)
 80002cc:	2202      	movs	r2, #2
 80002ce:	601a      	str	r2, [r3, #0]
			}

			if(buttonState[0] == BUTTON_PRESSED){
 80002d0:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <fsm_automatic+0xf0>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d133      	bne.n	8000340 <fsm_automatic+0xd8>
				setEnviromentState4();	/*Mode 2*/
 80002d8:	f7ff ff50 	bl	800017c <setEnviromentState4>
				FSM_State = NORMAL_STATE_MODE_2;
 80002dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000350 <fsm_automatic+0xe8>)
 80002de:	2204      	movs	r2, #4
 80002e0:	601a      	str	r2, [r3, #0]
			}
			break;
 80002e2:	e02d      	b.n	8000340 <fsm_automatic+0xd8>
		case GREEN_RED_STATE_MODE1:
			doState2();
 80002e4:	f7ff ff88 	bl	80001f8 <doState2>

			if(state_traffic == YELLOW_RED_STATE){
 80002e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000354 <fsm_automatic+0xec>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	d104      	bne.n	80002fa <fsm_automatic+0x92>
				setEnviromentState3();
 80002f0:	f7ff ff3e 	bl	8000170 <setEnviromentState3>
				FSM_State = YELLOW_RED_STATE_MODE1;
 80002f4:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <fsm_automatic+0xe8>)
 80002f6:	2203      	movs	r2, #3
 80002f8:	601a      	str	r2, [r3, #0]
			}

			if(buttonState[0] == BUTTON_PRESSED){
 80002fa:	4b17      	ldr	r3, [pc, #92]	@ (8000358 <fsm_automatic+0xf0>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d120      	bne.n	8000344 <fsm_automatic+0xdc>
				setEnviromentState4();	/*Mode 2*/
 8000302:	f7ff ff3b 	bl	800017c <setEnviromentState4>
				FSM_State = NORMAL_STATE_MODE_2;
 8000306:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <fsm_automatic+0xe8>)
 8000308:	2204      	movs	r2, #4
 800030a:	601a      	str	r2, [r3, #0]
			}
			break;
 800030c:	e01a      	b.n	8000344 <fsm_automatic+0xdc>
		case YELLOW_RED_STATE_MODE1:
			doState3();
 800030e:	f7ff ff8f 	bl	8000230 <doState3>

			if(state_traffic == RED_GREEN_STATE){
 8000312:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <fsm_automatic+0xec>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d104      	bne.n	8000324 <fsm_automatic+0xbc>
				setEnviromentState0();
 800031a:	f7ff ff17 	bl	800014c <setEnviromentState0>
				FSM_State = RED_GREEN_STATE_MODE1;
 800031e:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <fsm_automatic+0xe8>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
			}

			if(buttonState[0] == BUTTON_PRESSED){
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <fsm_automatic+0xf0>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10d      	bne.n	8000348 <fsm_automatic+0xe0>
				setEnviromentState4();	/*Mode 2*/
 800032c:	f7ff ff26 	bl	800017c <setEnviromentState4>
				FSM_State = NORMAL_STATE_MODE_2;
 8000330:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <fsm_automatic+0xe8>)
 8000332:	2204      	movs	r2, #4
 8000334:	601a      	str	r2, [r3, #0]
			}
			break;
 8000336:	e007      	b.n	8000348 <fsm_automatic+0xe0>
		default:
			break;
 8000338:	bf00      	nop
 800033a:	e006      	b.n	800034a <fsm_automatic+0xe2>
			break;
 800033c:	bf00      	nop
 800033e:	e004      	b.n	800034a <fsm_automatic+0xe2>
			break;
 8000340:	bf00      	nop
 8000342:	e002      	b.n	800034a <fsm_automatic+0xe2>
			break;
 8000344:	bf00      	nop
 8000346:	e000      	b.n	800034a <fsm_automatic+0xe2>
			break;
 8000348:	bf00      	nop
		}

		return;
 800034a:	bf00      	nop
}
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200000a0 	.word	0x200000a0
 8000354:	20000110 	.word	0x20000110
 8000358:	200000a4 	.word	0x200000a4

0800035c <fsm_for_input_processing>:

#include "input_processing.h"

enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED,BUTTON_RELEASED,BUTTON_RELEASED};

void fsm_for_input_processing(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
	for(int i=0;i<N0_OF_BUTTONS;i++){
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	e04c      	b.n	8000402 <fsm_for_input_processing+0xa6>
		switch(buttonState[i]){
 8000368:	4a2a      	ldr	r2, [pc, #168]	@ (8000414 <fsm_for_input_processing+0xb8>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b02      	cmp	r3, #2
 8000372:	d030      	beq.n	80003d6 <fsm_for_input_processing+0x7a>
 8000374:	2b02      	cmp	r3, #2
 8000376:	dc41      	bgt.n	80003fc <fsm_for_input_processing+0xa0>
 8000378:	2b00      	cmp	r3, #0
 800037a:	d002      	beq.n	8000382 <fsm_for_input_processing+0x26>
 800037c:	2b01      	cmp	r3, #1
 800037e:	d00e      	beq.n	800039e <fsm_for_input_processing+0x42>
 8000380:	e03c      	b.n	80003fc <fsm_for_input_processing+0xa0>
		case BUTTON_RELEASED:
			if(is_button_pressed(i)){
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	b2db      	uxtb	r3, r3
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f846 	bl	8000418 <is_button_pressed>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d02f      	beq.n	80003f2 <fsm_for_input_processing+0x96>
				buttonState[i] = BUTTON_PRESSED;
 8000392:	4a20      	ldr	r2, [pc, #128]	@ (8000414 <fsm_for_input_processing+0xb8>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	2201      	movs	r2, #1
 800039a:	701a      	strb	r2, [r3, #0]
				// Increase value PORTA by one
			}
			break;
 800039c:	e029      	b.n	80003f2 <fsm_for_input_processing+0x96>
		case BUTTON_PRESSED:
			if(!is_button_pressed(i)){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f838 	bl	8000418 <is_button_pressed>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d105      	bne.n	80003ba <fsm_for_input_processing+0x5e>
				buttonState[i] = BUTTON_RELEASED;
 80003ae:	4a19      	ldr	r2, [pc, #100]	@ (8000414 <fsm_for_input_processing+0xb8>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4413      	add	r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
					// Set timer 500ms for auto increase
					//setTimer(AUTO_INCREASE, 500);
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 80003b8:	e01d      	b.n	80003f6 <fsm_for_input_processing+0x9a>
				if(is_button_pressed_1s(i)){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f848 	bl	8000454 <is_button_pressed_1s>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d015      	beq.n	80003f6 <fsm_for_input_processing+0x9a>
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80003ca:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <fsm_for_input_processing+0xb8>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4413      	add	r3, r2
 80003d0:	2202      	movs	r2, #2
 80003d2:	701a      	strb	r2, [r3, #0]
			break;
 80003d4:	e00f      	b.n	80003f6 <fsm_for_input_processing+0x9a>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if(!is_button_pressed(i)){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 f81c 	bl	8000418 <is_button_pressed>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d109      	bne.n	80003fa <fsm_for_input_processing+0x9e>
				buttonState[i] = BUTTON_RELEASED;
 80003e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000414 <fsm_for_input_processing+0xb8>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4413      	add	r3, r2
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
				/*if(getTimerFlags(AUTO_INCREASE)){
					// Increase value PORTA by one
					//setTimer(AUTO_INCREASE, 500);
				}*/
			}
			break;
 80003f0:	e003      	b.n	80003fa <fsm_for_input_processing+0x9e>
			break;
 80003f2:	bf00      	nop
 80003f4:	e002      	b.n	80003fc <fsm_for_input_processing+0xa0>
			break;
 80003f6:	bf00      	nop
 80003f8:	e000      	b.n	80003fc <fsm_for_input_processing+0xa0>
			break;
 80003fa:	bf00      	nop
	for(int i=0;i<N0_OF_BUTTONS;i++){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b02      	cmp	r3, #2
 8000406:	ddaf      	ble.n	8000368 <fsm_for_input_processing+0xc>
		}
	}
}
 8000408:	bf00      	nop
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200000a4 	.word	0x200000a4

08000418 <is_button_pressed>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS] = {0};
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {0};

unsigned char is_button_pressed(uint8_t index){
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d901      	bls.n	800042c <is_button_pressed+0x14>
 8000428:	2300      	movs	r3, #0
 800042a:	e00b      	b.n	8000444 <is_button_pressed+0x2c>

	if(flagForButtonPress[index]){
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	4a08      	ldr	r2, [pc, #32]	@ (8000450 <is_button_pressed+0x38>)
 8000430:	5cd3      	ldrb	r3, [r2, r3]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d005      	beq.n	8000442 <is_button_pressed+0x2a>
		flagForButtonPress[index] = 0;
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	4a05      	ldr	r2, [pc, #20]	@ (8000450 <is_button_pressed+0x38>)
 800043a:	2100      	movs	r1, #0
 800043c:	54d1      	strb	r1, [r2, r3]
		return 1;
 800043e:	2301      	movs	r3, #1
 8000440:	e000      	b.n	8000444 <is_button_pressed+0x2c>
	}

	return 0;
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	200000a8 	.word	0x200000a8

08000454 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b02      	cmp	r3, #2
 8000462:	d901      	bls.n	8000468 <is_button_pressed_1s+0x14>
 8000464:	23ff      	movs	r3, #255	@ 0xff
 8000466:	e00b      	b.n	8000480 <is_button_pressed_1s+0x2c>

	if(flagForButtonPress1s[index]){
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	4a08      	ldr	r2, [pc, #32]	@ (800048c <is_button_pressed_1s+0x38>)
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d005      	beq.n	800047e <is_button_pressed_1s+0x2a>
		flagForButtonPress1s[index] = 0;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4a05      	ldr	r2, [pc, #20]	@ (800048c <is_button_pressed_1s+0x38>)
 8000476:	2100      	movs	r1, #0
 8000478:	54d1      	strb	r1, [r2, r3]
		return 1;
 800047a:	2301      	movs	r3, #1
 800047c:	e000      	b.n	8000480 <is_button_pressed_1s+0x2c>
	}

	return 0;
 800047e:	2300      	movs	r3, #0
}
 8000480:	4618      	mov	r0, r3
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	200000ac 	.word	0x200000ac

08000490 <button_reading>:

/*Many bug in input_reading :))*/
void button_reading(void){
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000496:	2300      	movs	r3, #0
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	e082      	b.n	80005a2 <button_reading+0x112>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 800049c:	4a45      	ldr	r2, [pc, #276]	@ (80005b4 <button_reading+0x124>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	7819      	ldrb	r1, [r3, #0]
 80004a4:	4a44      	ldr	r2, [pc, #272]	@ (80005b8 <button_reading+0x128>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	460a      	mov	r2, r1
 80004ac:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80004ae:	4a43      	ldr	r2, [pc, #268]	@ (80005bc <button_reading+0x12c>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4413      	add	r3, r2
 80004b4:	7819      	ldrb	r1, [r3, #0]
 80004b6:	4a3f      	ldr	r2, [pc, #252]	@ (80005b4 <button_reading+0x124>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4413      	add	r3, r2
 80004bc:	460a      	mov	r2, r1
 80004be:	701a      	strb	r2, [r3, #0]
		// Chose button port
		if(i == 0){
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d10b      	bne.n	80004de <button_reading+0x4e>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 80004c6:	2101      	movs	r1, #1
 80004c8:	483d      	ldr	r0, [pc, #244]	@ (80005c0 <button_reading+0x130>)
 80004ca:	f001 fbb3 	bl	8001c34 <HAL_GPIO_ReadPin>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4619      	mov	r1, r3
 80004d2:	4a3a      	ldr	r2, [pc, #232]	@ (80005bc <button_reading+0x12c>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4413      	add	r3, r2
 80004d8:	460a      	mov	r2, r1
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	e01c      	b.n	8000518 <button_reading+0x88>
		}
		else if(i == 1){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10b      	bne.n	80004fc <button_reading+0x6c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80004e4:	2102      	movs	r1, #2
 80004e6:	4836      	ldr	r0, [pc, #216]	@ (80005c0 <button_reading+0x130>)
 80004e8:	f001 fba4 	bl	8001c34 <HAL_GPIO_ReadPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4619      	mov	r1, r3
 80004f0:	4a32      	ldr	r2, [pc, #200]	@ (80005bc <button_reading+0x12c>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	460a      	mov	r2, r1
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	e00d      	b.n	8000518 <button_reading+0x88>
		}
		else if( i == 2){
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d10a      	bne.n	8000518 <button_reading+0x88>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000502:	2104      	movs	r1, #4
 8000504:	482e      	ldr	r0, [pc, #184]	@ (80005c0 <button_reading+0x130>)
 8000506:	f001 fb95 	bl	8001c34 <HAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	4619      	mov	r1, r3
 800050e:	4a2b      	ldr	r2, [pc, #172]	@ (80005bc <button_reading+0x12c>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4413      	add	r3, r2
 8000514:	460a      	mov	r2, r1
 8000516:	701a      	strb	r2, [r3, #0]
		}
		else{
			/*This is fault value of index button*/
		}

		if((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) &&
 8000518:	4a28      	ldr	r2, [pc, #160]	@ (80005bc <button_reading+0x12c>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	4924      	ldr	r1, [pc, #144]	@ (80005b4 <button_reading+0x124>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	440b      	add	r3, r1
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	d137      	bne.n	800059c <button_reading+0x10c>
				(debounceButtonBuffer2[i] == debounceButtonBuffer3[i])){
 800052c:	4a21      	ldr	r2, [pc, #132]	@ (80005b4 <button_reading+0x124>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	4920      	ldr	r1, [pc, #128]	@ (80005b8 <button_reading+0x128>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	440b      	add	r3, r1
 800053a:	781b      	ldrb	r3, [r3, #0]
		if((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) &&
 800053c:	429a      	cmp	r2, r3
 800053e:	d12d      	bne.n	800059c <button_reading+0x10c>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 8000540:	4a1e      	ldr	r2, [pc, #120]	@ (80005bc <button_reading+0x12c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	781a      	ldrb	r2, [r3, #0]
 8000548:	491e      	ldr	r1, [pc, #120]	@ (80005c4 <button_reading+0x134>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	440b      	add	r3, r1
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d019      	beq.n	8000588 <button_reading+0xf8>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 8000554:	4a19      	ldr	r2, [pc, #100]	@ (80005bc <button_reading+0x12c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	7819      	ldrb	r1, [r3, #0]
 800055c:	4a19      	ldr	r2, [pc, #100]	@ (80005c4 <button_reading+0x134>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	460a      	mov	r2, r1
 8000564:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000566:	4a17      	ldr	r2, [pc, #92]	@ (80005c4 <button_reading+0x134>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4413      	add	r3, r2
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d114      	bne.n	800059c <button_reading+0x10c>
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000572:	4a15      	ldr	r2, [pc, #84]	@ (80005c8 <button_reading+0x138>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2164      	movs	r1, #100	@ 0x64
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPress[i] = 1;
 800057c:	4a13      	ldr	r2, [pc, #76]	@ (80005cc <button_reading+0x13c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	e009      	b.n	800059c <button_reading+0x10c>
				}
			}
			else{
				counterForButtonPress1s[i]--;
 8000588:	4a0f      	ldr	r2, [pc, #60]	@ (80005c8 <button_reading+0x138>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000590:	3b01      	subs	r3, #1
 8000592:	b299      	uxth	r1, r3
 8000594:	4a0c      	ldr	r2, [pc, #48]	@ (80005c8 <button_reading+0x138>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3301      	adds	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	f77f af79 	ble.w	800049c <button_reading+0xc>
					}
				}
			}
		}
	}
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000008 	.word	0x20000008
 80005b8:	2000000c 	.word	0x2000000c
 80005bc:	20000004 	.word	0x20000004
 80005c0:	40010c00 	.word	0x40010c00
 80005c4:	20000000 	.word	0x20000000
 80005c8:	200000b0 	.word	0x200000b0
 80005cc:	200000a8 	.word	0x200000a8

080005d0 <display7SEG_13>:
	default:
		break;
	}
}

void display7SEG_13(int number){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(number == 0){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d123      	bne.n	8000626 <display7SEG_13+0x56>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2101      	movs	r1, #1
 80005e2:	48c2      	ldr	r0, [pc, #776]	@ (80008ec <display7SEG_13+0x31c>)
 80005e4:	f001 fb3d 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2102      	movs	r1, #2
 80005ec:	48bf      	ldr	r0, [pc, #764]	@ (80008ec <display7SEG_13+0x31c>)
 80005ee:	f001 fb38 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2104      	movs	r1, #4
 80005f6:	48bd      	ldr	r0, [pc, #756]	@ (80008ec <display7SEG_13+0x31c>)
 80005f8:	f001 fb33 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2108      	movs	r1, #8
 8000600:	48ba      	ldr	r0, [pc, #744]	@ (80008ec <display7SEG_13+0x31c>)
 8000602:	f001 fb2e 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2110      	movs	r1, #16
 800060a:	48b8      	ldr	r0, [pc, #736]	@ (80008ec <display7SEG_13+0x31c>)
 800060c:	f001 fb29 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	48b5      	ldr	r0, [pc, #724]	@ (80008ec <display7SEG_13+0x31c>)
 8000616:	f001 fb24 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2140      	movs	r1, #64	@ 0x40
 800061e:	48b3      	ldr	r0, [pc, #716]	@ (80008ec <display7SEG_13+0x31c>)
 8000620:	f001 fb1f 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 8000624:	e15d      	b.n	80008e2 <display7SEG_13+0x312>
	else if(number == 1){
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d123      	bne.n	8000674 <display7SEG_13+0xa4>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2101      	movs	r1, #1
 8000630:	48ae      	ldr	r0, [pc, #696]	@ (80008ec <display7SEG_13+0x31c>)
 8000632:	f001 fb16 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2102      	movs	r1, #2
 800063a:	48ac      	ldr	r0, [pc, #688]	@ (80008ec <display7SEG_13+0x31c>)
 800063c:	f001 fb11 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2104      	movs	r1, #4
 8000644:	48a9      	ldr	r0, [pc, #676]	@ (80008ec <display7SEG_13+0x31c>)
 8000646:	f001 fb0c 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2108      	movs	r1, #8
 800064e:	48a7      	ldr	r0, [pc, #668]	@ (80008ec <display7SEG_13+0x31c>)
 8000650:	f001 fb07 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2110      	movs	r1, #16
 8000658:	48a4      	ldr	r0, [pc, #656]	@ (80008ec <display7SEG_13+0x31c>)
 800065a:	f001 fb02 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2120      	movs	r1, #32
 8000662:	48a2      	ldr	r0, [pc, #648]	@ (80008ec <display7SEG_13+0x31c>)
 8000664:	f001 fafd 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2140      	movs	r1, #64	@ 0x40
 800066c:	489f      	ldr	r0, [pc, #636]	@ (80008ec <display7SEG_13+0x31c>)
 800066e:	f001 faf8 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000672:	e136      	b.n	80008e2 <display7SEG_13+0x312>
	else if(number == 2){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b02      	cmp	r3, #2
 8000678:	d123      	bne.n	80006c2 <display7SEG_13+0xf2>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2101      	movs	r1, #1
 800067e:	489b      	ldr	r0, [pc, #620]	@ (80008ec <display7SEG_13+0x31c>)
 8000680:	f001 faef 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2102      	movs	r1, #2
 8000688:	4898      	ldr	r0, [pc, #608]	@ (80008ec <display7SEG_13+0x31c>)
 800068a:	f001 faea 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2104      	movs	r1, #4
 8000692:	4896      	ldr	r0, [pc, #600]	@ (80008ec <display7SEG_13+0x31c>)
 8000694:	f001 fae5 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2108      	movs	r1, #8
 800069c:	4893      	ldr	r0, [pc, #588]	@ (80008ec <display7SEG_13+0x31c>)
 800069e:	f001 fae0 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2110      	movs	r1, #16
 80006a6:	4891      	ldr	r0, [pc, #580]	@ (80008ec <display7SEG_13+0x31c>)
 80006a8:	f001 fadb 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2120      	movs	r1, #32
 80006b0:	488e      	ldr	r0, [pc, #568]	@ (80008ec <display7SEG_13+0x31c>)
 80006b2:	f001 fad6 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2140      	movs	r1, #64	@ 0x40
 80006ba:	488c      	ldr	r0, [pc, #560]	@ (80008ec <display7SEG_13+0x31c>)
 80006bc:	f001 fad1 	bl	8001c62 <HAL_GPIO_WritePin>
}
 80006c0:	e10f      	b.n	80008e2 <display7SEG_13+0x312>
	else if(number == 3){
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	d123      	bne.n	8000710 <display7SEG_13+0x140>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2101      	movs	r1, #1
 80006cc:	4887      	ldr	r0, [pc, #540]	@ (80008ec <display7SEG_13+0x31c>)
 80006ce:	f001 fac8 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2102      	movs	r1, #2
 80006d6:	4885      	ldr	r0, [pc, #532]	@ (80008ec <display7SEG_13+0x31c>)
 80006d8:	f001 fac3 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2104      	movs	r1, #4
 80006e0:	4882      	ldr	r0, [pc, #520]	@ (80008ec <display7SEG_13+0x31c>)
 80006e2:	f001 fabe 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2108      	movs	r1, #8
 80006ea:	4880      	ldr	r0, [pc, #512]	@ (80008ec <display7SEG_13+0x31c>)
 80006ec:	f001 fab9 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2110      	movs	r1, #16
 80006f4:	487d      	ldr	r0, [pc, #500]	@ (80008ec <display7SEG_13+0x31c>)
 80006f6:	f001 fab4 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2120      	movs	r1, #32
 80006fe:	487b      	ldr	r0, [pc, #492]	@ (80008ec <display7SEG_13+0x31c>)
 8000700:	f001 faaf 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2140      	movs	r1, #64	@ 0x40
 8000708:	4878      	ldr	r0, [pc, #480]	@ (80008ec <display7SEG_13+0x31c>)
 800070a:	f001 faaa 	bl	8001c62 <HAL_GPIO_WritePin>
}
 800070e:	e0e8      	b.n	80008e2 <display7SEG_13+0x312>
	else if(number == 4){
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b04      	cmp	r3, #4
 8000714:	d123      	bne.n	800075e <display7SEG_13+0x18e>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2101      	movs	r1, #1
 800071a:	4874      	ldr	r0, [pc, #464]	@ (80008ec <display7SEG_13+0x31c>)
 800071c:	f001 faa1 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2102      	movs	r1, #2
 8000724:	4871      	ldr	r0, [pc, #452]	@ (80008ec <display7SEG_13+0x31c>)
 8000726:	f001 fa9c 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2104      	movs	r1, #4
 800072e:	486f      	ldr	r0, [pc, #444]	@ (80008ec <display7SEG_13+0x31c>)
 8000730:	f001 fa97 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2108      	movs	r1, #8
 8000738:	486c      	ldr	r0, [pc, #432]	@ (80008ec <display7SEG_13+0x31c>)
 800073a:	f001 fa92 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2110      	movs	r1, #16
 8000742:	486a      	ldr	r0, [pc, #424]	@ (80008ec <display7SEG_13+0x31c>)
 8000744:	f001 fa8d 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2120      	movs	r1, #32
 800074c:	4867      	ldr	r0, [pc, #412]	@ (80008ec <display7SEG_13+0x31c>)
 800074e:	f001 fa88 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2140      	movs	r1, #64	@ 0x40
 8000756:	4865      	ldr	r0, [pc, #404]	@ (80008ec <display7SEG_13+0x31c>)
 8000758:	f001 fa83 	bl	8001c62 <HAL_GPIO_WritePin>
}
 800075c:	e0c1      	b.n	80008e2 <display7SEG_13+0x312>
	else if(number == 5){
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b05      	cmp	r3, #5
 8000762:	d123      	bne.n	80007ac <display7SEG_13+0x1dc>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	4860      	ldr	r0, [pc, #384]	@ (80008ec <display7SEG_13+0x31c>)
 800076a:	f001 fa7a 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2102      	movs	r1, #2
 8000772:	485e      	ldr	r0, [pc, #376]	@ (80008ec <display7SEG_13+0x31c>)
 8000774:	f001 fa75 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	485b      	ldr	r0, [pc, #364]	@ (80008ec <display7SEG_13+0x31c>)
 800077e:	f001 fa70 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2108      	movs	r1, #8
 8000786:	4859      	ldr	r0, [pc, #356]	@ (80008ec <display7SEG_13+0x31c>)
 8000788:	f001 fa6b 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2110      	movs	r1, #16
 8000790:	4856      	ldr	r0, [pc, #344]	@ (80008ec <display7SEG_13+0x31c>)
 8000792:	f001 fa66 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	4854      	ldr	r0, [pc, #336]	@ (80008ec <display7SEG_13+0x31c>)
 800079c:	f001 fa61 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2140      	movs	r1, #64	@ 0x40
 80007a4:	4851      	ldr	r0, [pc, #324]	@ (80008ec <display7SEG_13+0x31c>)
 80007a6:	f001 fa5c 	bl	8001c62 <HAL_GPIO_WritePin>
}
 80007aa:	e09a      	b.n	80008e2 <display7SEG_13+0x312>
	else if(number == 6){
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d123      	bne.n	80007fa <display7SEG_13+0x22a>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2101      	movs	r1, #1
 80007b6:	484d      	ldr	r0, [pc, #308]	@ (80008ec <display7SEG_13+0x31c>)
 80007b8:	f001 fa53 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2102      	movs	r1, #2
 80007c0:	484a      	ldr	r0, [pc, #296]	@ (80008ec <display7SEG_13+0x31c>)
 80007c2:	f001 fa4e 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2104      	movs	r1, #4
 80007ca:	4848      	ldr	r0, [pc, #288]	@ (80008ec <display7SEG_13+0x31c>)
 80007cc:	f001 fa49 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2108      	movs	r1, #8
 80007d4:	4845      	ldr	r0, [pc, #276]	@ (80008ec <display7SEG_13+0x31c>)
 80007d6:	f001 fa44 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2110      	movs	r1, #16
 80007de:	4843      	ldr	r0, [pc, #268]	@ (80008ec <display7SEG_13+0x31c>)
 80007e0:	f001 fa3f 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	4840      	ldr	r0, [pc, #256]	@ (80008ec <display7SEG_13+0x31c>)
 80007ea:	f001 fa3a 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	@ 0x40
 80007f2:	483e      	ldr	r0, [pc, #248]	@ (80008ec <display7SEG_13+0x31c>)
 80007f4:	f001 fa35 	bl	8001c62 <HAL_GPIO_WritePin>
}
 80007f8:	e073      	b.n	80008e2 <display7SEG_13+0x312>
	else if(number == 7){
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b07      	cmp	r3, #7
 80007fe:	d123      	bne.n	8000848 <display7SEG_13+0x278>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2101      	movs	r1, #1
 8000804:	4839      	ldr	r0, [pc, #228]	@ (80008ec <display7SEG_13+0x31c>)
 8000806:	f001 fa2c 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2102      	movs	r1, #2
 800080e:	4837      	ldr	r0, [pc, #220]	@ (80008ec <display7SEG_13+0x31c>)
 8000810:	f001 fa27 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2104      	movs	r1, #4
 8000818:	4834      	ldr	r0, [pc, #208]	@ (80008ec <display7SEG_13+0x31c>)
 800081a:	f001 fa22 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2108      	movs	r1, #8
 8000822:	4832      	ldr	r0, [pc, #200]	@ (80008ec <display7SEG_13+0x31c>)
 8000824:	f001 fa1d 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2110      	movs	r1, #16
 800082c:	482f      	ldr	r0, [pc, #188]	@ (80008ec <display7SEG_13+0x31c>)
 800082e:	f001 fa18 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	482d      	ldr	r0, [pc, #180]	@ (80008ec <display7SEG_13+0x31c>)
 8000838:	f001 fa13 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2140      	movs	r1, #64	@ 0x40
 8000840:	482a      	ldr	r0, [pc, #168]	@ (80008ec <display7SEG_13+0x31c>)
 8000842:	f001 fa0e 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000846:	e04c      	b.n	80008e2 <display7SEG_13+0x312>
	else if(number == 8){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b08      	cmp	r3, #8
 800084c:	d123      	bne.n	8000896 <display7SEG_13+0x2c6>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2101      	movs	r1, #1
 8000852:	4826      	ldr	r0, [pc, #152]	@ (80008ec <display7SEG_13+0x31c>)
 8000854:	f001 fa05 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2102      	movs	r1, #2
 800085c:	4823      	ldr	r0, [pc, #140]	@ (80008ec <display7SEG_13+0x31c>)
 800085e:	f001 fa00 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2104      	movs	r1, #4
 8000866:	4821      	ldr	r0, [pc, #132]	@ (80008ec <display7SEG_13+0x31c>)
 8000868:	f001 f9fb 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2108      	movs	r1, #8
 8000870:	481e      	ldr	r0, [pc, #120]	@ (80008ec <display7SEG_13+0x31c>)
 8000872:	f001 f9f6 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2110      	movs	r1, #16
 800087a:	481c      	ldr	r0, [pc, #112]	@ (80008ec <display7SEG_13+0x31c>)
 800087c:	f001 f9f1 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2120      	movs	r1, #32
 8000884:	4819      	ldr	r0, [pc, #100]	@ (80008ec <display7SEG_13+0x31c>)
 8000886:	f001 f9ec 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2140      	movs	r1, #64	@ 0x40
 800088e:	4817      	ldr	r0, [pc, #92]	@ (80008ec <display7SEG_13+0x31c>)
 8000890:	f001 f9e7 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000894:	e025      	b.n	80008e2 <display7SEG_13+0x312>
	else if(number == 9){
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b09      	cmp	r3, #9
 800089a:	d122      	bne.n	80008e2 <display7SEG_13+0x312>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4812      	ldr	r0, [pc, #72]	@ (80008ec <display7SEG_13+0x31c>)
 80008a2:	f001 f9de 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2102      	movs	r1, #2
 80008aa:	4810      	ldr	r0, [pc, #64]	@ (80008ec <display7SEG_13+0x31c>)
 80008ac:	f001 f9d9 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2104      	movs	r1, #4
 80008b4:	480d      	ldr	r0, [pc, #52]	@ (80008ec <display7SEG_13+0x31c>)
 80008b6:	f001 f9d4 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2108      	movs	r1, #8
 80008be:	480b      	ldr	r0, [pc, #44]	@ (80008ec <display7SEG_13+0x31c>)
 80008c0:	f001 f9cf 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2110      	movs	r1, #16
 80008c8:	4808      	ldr	r0, [pc, #32]	@ (80008ec <display7SEG_13+0x31c>)
 80008ca:	f001 f9ca 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	4806      	ldr	r0, [pc, #24]	@ (80008ec <display7SEG_13+0x31c>)
 80008d4:	f001 f9c5 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2140      	movs	r1, #64	@ 0x40
 80008dc:	4803      	ldr	r0, [pc, #12]	@ (80008ec <display7SEG_13+0x31c>)
 80008de:	f001 f9c0 	bl	8001c62 <HAL_GPIO_WritePin>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40010800 	.word	0x40010800

080008f0 <display7SEG_24>:

void display7SEG_24(int number){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if(number == 0){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d12a      	bne.n	8000954 <display7SEG_24+0x64>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000904:	48cb      	ldr	r0, [pc, #812]	@ (8000c34 <display7SEG_24+0x344>)
 8000906:	f001 f9ac 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000910:	48c8      	ldr	r0, [pc, #800]	@ (8000c34 <display7SEG_24+0x344>)
 8000912:	f001 f9a6 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800091c:	48c5      	ldr	r0, [pc, #788]	@ (8000c34 <display7SEG_24+0x344>)
 800091e:	f001 f9a0 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000928:	48c2      	ldr	r0, [pc, #776]	@ (8000c34 <display7SEG_24+0x344>)
 800092a:	f001 f99a 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000934:	48bf      	ldr	r0, [pc, #764]	@ (8000c34 <display7SEG_24+0x344>)
 8000936:	f001 f994 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000940:	48bc      	ldr	r0, [pc, #752]	@ (8000c34 <display7SEG_24+0x344>)
 8000942:	f001 f98e 	bl	8001c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800094c:	48b9      	ldr	r0, [pc, #740]	@ (8000c34 <display7SEG_24+0x344>)
 800094e:	f001 f988 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 8000952:	e19e      	b.n	8000c92 <display7SEG_24+0x3a2>
	else if(number == 1){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d12a      	bne.n	80009b0 <display7SEG_24+0xc0>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000960:	48b4      	ldr	r0, [pc, #720]	@ (8000c34 <display7SEG_24+0x344>)
 8000962:	f001 f97e 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800096c:	48b1      	ldr	r0, [pc, #708]	@ (8000c34 <display7SEG_24+0x344>)
 800096e:	f001 f978 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000978:	48ae      	ldr	r0, [pc, #696]	@ (8000c34 <display7SEG_24+0x344>)
 800097a:	f001 f972 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000984:	48ab      	ldr	r0, [pc, #684]	@ (8000c34 <display7SEG_24+0x344>)
 8000986:	f001 f96c 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000990:	48a8      	ldr	r0, [pc, #672]	@ (8000c34 <display7SEG_24+0x344>)
 8000992:	f001 f966 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800099c:	48a5      	ldr	r0, [pc, #660]	@ (8000c34 <display7SEG_24+0x344>)
 800099e:	f001 f960 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009a8:	48a2      	ldr	r0, [pc, #648]	@ (8000c34 <display7SEG_24+0x344>)
 80009aa:	f001 f95a 	bl	8001c62 <HAL_GPIO_WritePin>
}
 80009ae:	e170      	b.n	8000c92 <display7SEG_24+0x3a2>
	else if(number == 2){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d12a      	bne.n	8000a0c <display7SEG_24+0x11c>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009bc:	489d      	ldr	r0, [pc, #628]	@ (8000c34 <display7SEG_24+0x344>)
 80009be:	f001 f950 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c8:	489a      	ldr	r0, [pc, #616]	@ (8000c34 <display7SEG_24+0x344>)
 80009ca:	f001 f94a 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009d4:	4897      	ldr	r0, [pc, #604]	@ (8000c34 <display7SEG_24+0x344>)
 80009d6:	f001 f944 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009e0:	4894      	ldr	r0, [pc, #592]	@ (8000c34 <display7SEG_24+0x344>)
 80009e2:	f001 f93e 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ec:	4891      	ldr	r0, [pc, #580]	@ (8000c34 <display7SEG_24+0x344>)
 80009ee:	f001 f938 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f8:	488e      	ldr	r0, [pc, #568]	@ (8000c34 <display7SEG_24+0x344>)
 80009fa:	f001 f932 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a04:	488b      	ldr	r0, [pc, #556]	@ (8000c34 <display7SEG_24+0x344>)
 8000a06:	f001 f92c 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000a0a:	e142      	b.n	8000c92 <display7SEG_24+0x3a2>
	else if(number == 3){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d12a      	bne.n	8000a68 <display7SEG_24+0x178>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a18:	4886      	ldr	r0, [pc, #536]	@ (8000c34 <display7SEG_24+0x344>)
 8000a1a:	f001 f922 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a24:	4883      	ldr	r0, [pc, #524]	@ (8000c34 <display7SEG_24+0x344>)
 8000a26:	f001 f91c 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a30:	4880      	ldr	r0, [pc, #512]	@ (8000c34 <display7SEG_24+0x344>)
 8000a32:	f001 f916 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a3c:	487d      	ldr	r0, [pc, #500]	@ (8000c34 <display7SEG_24+0x344>)
 8000a3e:	f001 f910 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a48:	487a      	ldr	r0, [pc, #488]	@ (8000c34 <display7SEG_24+0x344>)
 8000a4a:	f001 f90a 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a54:	4877      	ldr	r0, [pc, #476]	@ (8000c34 <display7SEG_24+0x344>)
 8000a56:	f001 f904 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a60:	4874      	ldr	r0, [pc, #464]	@ (8000c34 <display7SEG_24+0x344>)
 8000a62:	f001 f8fe 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000a66:	e114      	b.n	8000c92 <display7SEG_24+0x3a2>
	else if(number == 4){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d12a      	bne.n	8000ac4 <display7SEG_24+0x1d4>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a74:	486f      	ldr	r0, [pc, #444]	@ (8000c34 <display7SEG_24+0x344>)
 8000a76:	f001 f8f4 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a80:	486c      	ldr	r0, [pc, #432]	@ (8000c34 <display7SEG_24+0x344>)
 8000a82:	f001 f8ee 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8c:	4869      	ldr	r0, [pc, #420]	@ (8000c34 <display7SEG_24+0x344>)
 8000a8e:	f001 f8e8 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a98:	4866      	ldr	r0, [pc, #408]	@ (8000c34 <display7SEG_24+0x344>)
 8000a9a:	f001 f8e2 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa4:	4863      	ldr	r0, [pc, #396]	@ (8000c34 <display7SEG_24+0x344>)
 8000aa6:	f001 f8dc 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab0:	4860      	ldr	r0, [pc, #384]	@ (8000c34 <display7SEG_24+0x344>)
 8000ab2:	f001 f8d6 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000abc:	485d      	ldr	r0, [pc, #372]	@ (8000c34 <display7SEG_24+0x344>)
 8000abe:	f001 f8d0 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000ac2:	e0e6      	b.n	8000c92 <display7SEG_24+0x3a2>
	else if(number == 5){
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b05      	cmp	r3, #5
 8000ac8:	d12a      	bne.n	8000b20 <display7SEG_24+0x230>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ad0:	4858      	ldr	r0, [pc, #352]	@ (8000c34 <display7SEG_24+0x344>)
 8000ad2:	f001 f8c6 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000adc:	4855      	ldr	r0, [pc, #340]	@ (8000c34 <display7SEG_24+0x344>)
 8000ade:	f001 f8c0 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae8:	4852      	ldr	r0, [pc, #328]	@ (8000c34 <display7SEG_24+0x344>)
 8000aea:	f001 f8ba 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000af4:	484f      	ldr	r0, [pc, #316]	@ (8000c34 <display7SEG_24+0x344>)
 8000af6:	f001 f8b4 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b00:	484c      	ldr	r0, [pc, #304]	@ (8000c34 <display7SEG_24+0x344>)
 8000b02:	f001 f8ae 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b0c:	4849      	ldr	r0, [pc, #292]	@ (8000c34 <display7SEG_24+0x344>)
 8000b0e:	f001 f8a8 	bl	8001c62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b18:	4846      	ldr	r0, [pc, #280]	@ (8000c34 <display7SEG_24+0x344>)
 8000b1a:	f001 f8a2 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000b1e:	e0b8      	b.n	8000c92 <display7SEG_24+0x3a2>
	else if(number == 6){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d12a      	bne.n	8000b7c <display7SEG_24+0x28c>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b2c:	4841      	ldr	r0, [pc, #260]	@ (8000c34 <display7SEG_24+0x344>)
 8000b2e:	f001 f898 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b38:	483e      	ldr	r0, [pc, #248]	@ (8000c34 <display7SEG_24+0x344>)
 8000b3a:	f001 f892 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b44:	483b      	ldr	r0, [pc, #236]	@ (8000c34 <display7SEG_24+0x344>)
 8000b46:	f001 f88c 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b50:	4838      	ldr	r0, [pc, #224]	@ (8000c34 <display7SEG_24+0x344>)
 8000b52:	f001 f886 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b5c:	4835      	ldr	r0, [pc, #212]	@ (8000c34 <display7SEG_24+0x344>)
 8000b5e:	f001 f880 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b68:	4832      	ldr	r0, [pc, #200]	@ (8000c34 <display7SEG_24+0x344>)
 8000b6a:	f001 f87a 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b74:	482f      	ldr	r0, [pc, #188]	@ (8000c34 <display7SEG_24+0x344>)
 8000b76:	f001 f874 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000b7a:	e08a      	b.n	8000c92 <display7SEG_24+0x3a2>
	else if(number == 7){
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b07      	cmp	r3, #7
 8000b80:	d12a      	bne.n	8000bd8 <display7SEG_24+0x2e8>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b88:	482a      	ldr	r0, [pc, #168]	@ (8000c34 <display7SEG_24+0x344>)
 8000b8a:	f001 f86a 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b94:	4827      	ldr	r0, [pc, #156]	@ (8000c34 <display7SEG_24+0x344>)
 8000b96:	f001 f864 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba0:	4824      	ldr	r0, [pc, #144]	@ (8000c34 <display7SEG_24+0x344>)
 8000ba2:	f001 f85e 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bac:	4821      	ldr	r0, [pc, #132]	@ (8000c34 <display7SEG_24+0x344>)
 8000bae:	f001 f858 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb8:	481e      	ldr	r0, [pc, #120]	@ (8000c34 <display7SEG_24+0x344>)
 8000bba:	f001 f852 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc4:	481b      	ldr	r0, [pc, #108]	@ (8000c34 <display7SEG_24+0x344>)
 8000bc6:	f001 f84c 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bd0:	4818      	ldr	r0, [pc, #96]	@ (8000c34 <display7SEG_24+0x344>)
 8000bd2:	f001 f846 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000bd6:	e05c      	b.n	8000c92 <display7SEG_24+0x3a2>
	else if(number == 8){
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d12c      	bne.n	8000c38 <display7SEG_24+0x348>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <display7SEG_24+0x344>)
 8000be6:	f001 f83c 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf0:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <display7SEG_24+0x344>)
 8000bf2:	f001 f836 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfc:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <display7SEG_24+0x344>)
 8000bfe:	f001 f830 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c08:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <display7SEG_24+0x344>)
 8000c0a:	f001 f82a 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c14:	4807      	ldr	r0, [pc, #28]	@ (8000c34 <display7SEG_24+0x344>)
 8000c16:	f001 f824 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <display7SEG_24+0x344>)
 8000c22:	f001 f81e 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c2c:	4801      	ldr	r0, [pc, #4]	@ (8000c34 <display7SEG_24+0x344>)
 8000c2e:	f001 f818 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000c32:	e02e      	b.n	8000c92 <display7SEG_24+0x3a2>
 8000c34:	40010800 	.word	0x40010800
	else if(number == 9){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b09      	cmp	r3, #9
 8000c3c:	d129      	bne.n	8000c92 <display7SEG_24+0x3a2>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c44:	4815      	ldr	r0, [pc, #84]	@ (8000c9c <display7SEG_24+0x3ac>)
 8000c46:	f001 f80c 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c50:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <display7SEG_24+0x3ac>)
 8000c52:	f001 f806 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c5c:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <display7SEG_24+0x3ac>)
 8000c5e:	f001 f800 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <display7SEG_24+0x3ac>)
 8000c6a:	f000 fffa 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c74:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <display7SEG_24+0x3ac>)
 8000c76:	f000 fff4 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c80:	4806      	ldr	r0, [pc, #24]	@ (8000c9c <display7SEG_24+0x3ac>)
 8000c82:	f000 ffee 	bl	8001c62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c8c:	4803      	ldr	r0, [pc, #12]	@ (8000c9c <display7SEG_24+0x3ac>)
 8000c8e:	f000 ffe8 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	button_reading();
 8000ca8:	f7ff fbf2 	bl	8000490 <button_reading>
	SCH_Update();
 8000cac:	f000 fa46 	bl	800113c <SCH_Update>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fcce 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f826 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f000 f8ac 	bl	8000e20 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cc8:	f000 f85e 	bl	8000d88 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //__HAL_RCC_GPIOB_CLK_ENABLE();

  SCH_Init();
 8000ccc:	f000 f930 	bl	8000f30 <SCH_Init>
  //SCH_Add_Task(run7Seg, 0, 250, 0);
  //SCH_Add_Task(runBlinkingLed, 0, 10, 0);

  //SCH_Add_Task(runLed, 0, 500, 0);
  //SCH_Add_Task(run7Seg, 0, 500, 0);
  SCH_Add_Task(runTime, 0, 1000, 0);
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	480a      	ldr	r0, [pc, #40]	@ (8000d04 <main+0x4c>)
 8000cda:	f000 f943 	bl	8000f64 <SCH_Add_Task>
  SCH_Add_Task(runTraffic, 1000, 1000, 0);
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ce4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ce8:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <main+0x50>)
 8000cea:	f000 f93b 	bl	8000f64 <SCH_Add_Task>
  //SCH_Add_Task(fsm_automatic, 0, 500, 0);
  //SCH_Add_Task(fsm_manual, 0, 10, 0);
  //SCH_Add_Task(fsm_setting, 0, 10, 0);
  //get_List();

  HAL_TIM_Base_Start_IT(&htim2);
 8000cee:	4807      	ldr	r0, [pc, #28]	@ (8000d0c <main+0x54>)
 8000cf0:	f001 fbfe 	bl	80024f0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	 fsm_for_input_processing();
 8000cf4:	f7ff fb32 	bl	800035c <fsm_for_input_processing>
	 fsm_automatic();
 8000cf8:	f7ff fab6 	bl	8000268 <fsm_automatic>
	 SCH_Dispatch_Task();
 8000cfc:	f000 fa44 	bl	8001188 <SCH_Dispatch_Task>
	 fsm_for_input_processing();
 8000d00:	bf00      	nop
 8000d02:	e7f7      	b.n	8000cf4 <main+0x3c>
 8000d04:	08001539 	.word	0x08001539
 8000d08:	08001551 	.word	0x08001551
 8000d0c:	200000b8 	.word	0x200000b8

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b090      	sub	sp, #64	@ 0x40
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	2228      	movs	r2, #40	@ 0x28
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 f830 	bl	8002d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d36:	2301      	movs	r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 ffa4 	bl	8001c94 <HAL_RCC_OscConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d52:	f000 f8c7 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d56:	230f      	movs	r3, #15
 8000d58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fa12 	bl	8002198 <HAL_RCC_ClockConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d7a:	f000 f8b3 	bl	8000ee4 <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3740      	adds	r7, #64	@ 0x40
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <MX_TIM2_Init+0x94>)
 8000da6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000daa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <MX_TIM2_Init+0x94>)
 8000dae:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000db2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <MX_TIM2_Init+0x94>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000dba:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <MX_TIM2_Init+0x94>)
 8000dbc:	2209      	movs	r2, #9
 8000dbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_TIM2_Init+0x94>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <MX_TIM2_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dcc:	4813      	ldr	r0, [pc, #76]	@ (8000e1c <MX_TIM2_Init+0x94>)
 8000dce:	f001 fb3f 	bl	8002450 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dd8:	f000 f884 	bl	8000ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <MX_TIM2_Init+0x94>)
 8000dea:	f001 fcbd 	bl	8002768 <HAL_TIM_ConfigClockSource>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000df4:	f000 f876 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e00:	463b      	mov	r3, r7
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <MX_TIM2_Init+0x94>)
 8000e06:	f001 fe95 	bl	8002b34 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e10:	f000 f868 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200000b8 	.word	0x200000b8

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <MX_GPIO_Init+0xb8>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a27      	ldr	r2, [pc, #156]	@ (8000ed8 <MX_GPIO_Init+0xb8>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <MX_GPIO_Init+0xb8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <MX_GPIO_Init+0xb8>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a21      	ldr	r2, [pc, #132]	@ (8000ed8 <MX_GPIO_Init+0xb8>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <MX_GPIO_Init+0xb8>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8000e64:	2200      	movs	r2, #0
 8000e66:	f647 717f 	movw	r1, #32639	@ 0x7f7f
 8000e6a:	481c      	ldr	r0, [pc, #112]	@ (8000edc <MX_GPIO_Init+0xbc>)
 8000e6c:	f000 fef9 	bl	8001c62 <HAL_GPIO_WritePin>
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|SEG24_A_Pin
                          |SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin|SEG24_E_Pin
                          |SEG24_F_Pin|SEG24_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000e70:	2200      	movs	r2, #0
 8000e72:	f24f 11f8 	movw	r1, #61944	@ 0xf1f8
 8000e76:	481a      	ldr	r0, [pc, #104]	@ (8000ee0 <MX_GPIO_Init+0xc0>)
 8000e78:	f000 fef3 	bl	8001c62 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG13_A_Pin SEG13_B_Pin SEG13_C_Pin SEG13_D_Pin
                           SEG13_E_Pin SEG13_F_Pin SEG13_G_Pin SEG24_A_Pin
                           SEG24_B_Pin SEG24_C_Pin SEG24_D_Pin SEG24_E_Pin
                           SEG24_F_Pin SEG24_G_Pin */
  GPIO_InitStruct.Pin = SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8000e7c:	f647 737f 	movw	r3, #32639	@ 0x7f7f
 8000e80:	60bb      	str	r3, [r7, #8]
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|SEG24_A_Pin
                          |SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin|SEG24_E_Pin
                          |SEG24_F_Pin|SEG24_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4619      	mov	r1, r3
 8000e94:	4811      	ldr	r0, [pc, #68]	@ (8000edc <MX_GPIO_Init+0xbc>)
 8000e96:	f000 fd51 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <MX_GPIO_Init+0xc0>)
 8000eae:	f000 fd45 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED13_RED_Pin LED13_YELLOW_Pin LED13_GREEN_Pin LED24_RED_Pin
                           LED24_YELLOW_Pin LED24_GREEN_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000eb2:	f24f 13f8 	movw	r3, #61944	@ 0xf1f8
 8000eb6:	60bb      	str	r3, [r7, #8]
                          |LED13_RED_Pin|LED13_YELLOW_Pin|LED13_GREEN_Pin|LED24_RED_Pin
                          |LED24_YELLOW_Pin|LED24_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_GPIO_Init+0xc0>)
 8000ecc:	f000 fd36 	bl	800193c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010800 	.word	0x40010800
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <Error_Handler+0x8>

08000ef0 <createTaskNode>:
Node_t* taskList;
int size_list;

int arr[20] = {0};

Node_t* createTaskNode(void(*pTask)(void),uint32_t Delay, uint32_t Period, uint32_t RunMe){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	603b      	str	r3, [r7, #0]
	Node_t* new_node = (Node_t*)malloc(sizeof(Node_t));
 8000efe:	2014      	movs	r0, #20
 8000f00:	f001 fe82 	bl	8002c08 <malloc>
 8000f04:	4603      	mov	r3, r0
 8000f06:	617b      	str	r3, [r7, #20]

	new_node->Task.pTask = pTask;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	601a      	str	r2, [r3, #0]
	new_node->Task.Delay = Delay;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	605a      	str	r2, [r3, #4]
	new_node->Task.Period = Period;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
	new_node->Task.RunMe = RunMe;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	60da      	str	r2, [r3, #12]
	//new_node->Task.TaskId = -1;

	new_node->next = NULL;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]

	return new_node;
 8000f26:	697b      	ldr	r3, [r7, #20]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <SCH_Init>:

void SCH_Init(void){
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	size_list = 0;
 8000f34:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <SCH_Init+0x24>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
	taskList = NULL;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <SCH_Init+0x28>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]

	Error_code_G = 0;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <SCH_Init+0x2c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]

	Task_Index = 0;
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <SCH_Init+0x30>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000108 	.word	0x20000108
 8000f58:	20000104 	.word	0x20000104
 8000f5c:	20000094 	.word	0x20000094
 8000f60:	20000100 	.word	0x20000100

08000f64 <SCH_Add_Task>:

void SCH_Add_Task(void(*pTask)(void), uint32_t Delay, uint32_t Period, uint32_t RunMe){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
//	if(size_list >= MAX_SCHEDULE_TASK){
//		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
//		return;
//	}
	Node_t* tmp_node = taskList;
 8000f72:	4b37      	ldr	r3, [pc, #220]	@ (8001050 <SCH_Add_Task+0xec>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	61fb      	str	r3, [r7, #28]
	Node_t* prev_node = NULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
	Node_t* new_node = createTaskNode(pTask, Delay / TIMER_CYCLE, Period / TIMER_CYCLE, RunMe);
 8000f7c:	4b35      	ldr	r3, [pc, #212]	@ (8001054 <SCH_Add_Task+0xf0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f88:	4b32      	ldr	r3, [pc, #200]	@ (8001054 <SCH_Add_Task+0xf0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ffaa 	bl	8000ef0 <createTaskNode>
 8000f9c:	6178      	str	r0, [r7, #20]
	//Node_t* travel_node = NULL;

	/*Linking list is empty*/
	if(tmp_node == NULL){
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d11a      	bne.n	8000fda <SCH_Add_Task+0x76>
		taskList = new_node;
 8000fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8001050 <SCH_Add_Task+0xec>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	6013      	str	r3, [r2, #0]
		size_list++;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	@ (8001058 <SCH_Add_Task+0xf4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a29      	ldr	r2, [pc, #164]	@ (8001058 <SCH_Add_Task+0xf4>)
 8000fb2:	6013      	str	r3, [r2, #0]
		return;
 8000fb4:	e049      	b.n	800104a <SCH_Add_Task+0xe6>
	}

	while(tmp_node != NULL){
		if(new_node->Task.Delay >= tmp_node->Task.Delay){
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d30f      	bcc.n	8000fe2 <SCH_Add_Task+0x7e>
			new_node->Task.Delay = new_node->Task.Delay - tmp_node->Task.Delay;
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	1ad2      	subs	r2, r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	605a      	str	r2, [r3, #4]

			prev_node = tmp_node;
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	61bb      	str	r3, [r7, #24]
			tmp_node = tmp_node->next;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	61fb      	str	r3, [r7, #28]
	while(tmp_node != NULL){
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1ea      	bne.n	8000fb6 <SCH_Add_Task+0x52>
 8000fe0:	e000      	b.n	8000fe4 <SCH_Add_Task+0x80>
		}
		else{
			break;
 8000fe2:	bf00      	nop
		}
	}

	if(prev_node == NULL){
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d113      	bne.n	8001012 <SCH_Add_Task+0xae>
		/*First node head, add to head*/
		new_node->next = taskList;
 8000fea:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <SCH_Add_Task+0xec>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	611a      	str	r2, [r3, #16]
		taskList = new_node;
 8000ff2:	4a17      	ldr	r2, [pc, #92]	@ (8001050 <SCH_Add_Task+0xec>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	6013      	str	r3, [r2, #0]
		while(travel_node != NULL){
			travel_node->Task.Delay = travel_node->Task.Delay - new_node->Task.Delay;

			travel_node = travel_node->next;
		}*/
		taskList->next->Task.Delay = taskList->next->Task.Delay - taskList->Task.Delay;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <SCH_Add_Task+0xec>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	6859      	ldr	r1, [r3, #4]
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <SCH_Add_Task+0xec>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <SCH_Add_Task+0xec>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	1a8a      	subs	r2, r1, r2
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	e016      	b.n	8001040 <SCH_Add_Task+0xdc>
	}
	else if(prev_node != NULL && tmp_node == NULL){
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <SCH_Add_Task+0xc2>
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <SCH_Add_Task+0xc2>
		/*Tail node, add to tail*/
		prev_node->next = new_node;
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	e00c      	b.n	8001040 <SCH_Add_Task+0xdc>
	}
	else{
		/*Add in mid*/
		prev_node->next = new_node;
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	611a      	str	r2, [r3, #16]
		new_node->next = tmp_node;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	611a      	str	r2, [r3, #16]
		while(travel_node != NULL){
			travel_node->Task.Delay = travel_node->Task.Delay - new_node->Task.Delay;

			travel_node = travel_node->next;
		}*/
		tmp_node->Task.Delay = tmp_node->Task.Delay - new_node->Task.Delay;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	1ad2      	subs	r2, r2, r3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	605a      	str	r2, [r3, #4]
	}

	size_list++;
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <SCH_Add_Task+0xf4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <SCH_Add_Task+0xf4>)
 8001048:	6013      	str	r3, [r2, #0]
}
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000104 	.word	0x20000104
 8001054:	20000014 	.word	0x20000014
 8001058:	20000108 	.word	0x20000108

0800105c <SCH_ReAdd_Task>:

void SCH_ReAdd_Task(void(*pTask)(void), uint32_t Delay, uint32_t Period, uint32_t RunMe){
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	603b      	str	r3, [r7, #0]
	/*if(size_list >= MAX_SCHEDULE_TASK){
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
		return;
	}*/

	Node_t* tmp_node = taskList;
 800106a:	4b32      	ldr	r3, [pc, #200]	@ (8001134 <SCH_ReAdd_Task+0xd8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	61fb      	str	r3, [r7, #28]
	Node_t* prev_node = NULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
	Node_t* new_node = createTaskNode(pTask, Delay, Period, RunMe);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f7ff ff38 	bl	8000ef0 <createTaskNode>
 8001080:	6178      	str	r0, [r7, #20]
	//Node_t* travel_node = NULL;

	/*Linking list is empty*/
	if(tmp_node == NULL){
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d11a      	bne.n	80010be <SCH_ReAdd_Task+0x62>
		taskList = new_node;
 8001088:	4a2a      	ldr	r2, [pc, #168]	@ (8001134 <SCH_ReAdd_Task+0xd8>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	6013      	str	r3, [r2, #0]
		size_list++;
 800108e:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <SCH_ReAdd_Task+0xdc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a28      	ldr	r2, [pc, #160]	@ (8001138 <SCH_ReAdd_Task+0xdc>)
 8001096:	6013      	str	r3, [r2, #0]
		return;
 8001098:	e049      	b.n	800112e <SCH_ReAdd_Task+0xd2>
	}

	while(tmp_node != NULL){
		if(new_node->Task.Delay >= tmp_node->Task.Delay){
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d30f      	bcc.n	80010c6 <SCH_ReAdd_Task+0x6a>
			new_node->Task.Delay = new_node->Task.Delay - tmp_node->Task.Delay;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	605a      	str	r2, [r3, #4]

			prev_node = tmp_node;
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	61bb      	str	r3, [r7, #24]
			tmp_node = tmp_node->next;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	61fb      	str	r3, [r7, #28]
	while(tmp_node != NULL){
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1ea      	bne.n	800109a <SCH_ReAdd_Task+0x3e>
 80010c4:	e000      	b.n	80010c8 <SCH_ReAdd_Task+0x6c>
		}
		else{
			break;
 80010c6:	bf00      	nop
		}
	}

	if(prev_node == NULL){
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d113      	bne.n	80010f6 <SCH_ReAdd_Task+0x9a>
		/*First node head, add to head*/
		new_node->next = taskList;
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <SCH_ReAdd_Task+0xd8>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	611a      	str	r2, [r3, #16]
		taskList = new_node;
 80010d6:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <SCH_ReAdd_Task+0xd8>)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	6013      	str	r3, [r2, #0]
		while(travel_node != NULL){
			travel_node->Task.Delay = travel_node->Task.Delay - new_node->Task.Delay;

			travel_node = travel_node->next;
		}*/
		taskList->next->Task.Delay = taskList->next->Task.Delay - taskList->Task.Delay;
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <SCH_ReAdd_Task+0xd8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	6859      	ldr	r1, [r3, #4]
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <SCH_ReAdd_Task+0xd8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <SCH_ReAdd_Task+0xd8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	1a8a      	subs	r2, r1, r2
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	e016      	b.n	8001124 <SCH_ReAdd_Task+0xc8>
	}
	else if(prev_node != NULL && tmp_node == NULL){
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <SCH_ReAdd_Task+0xae>
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d103      	bne.n	800110a <SCH_ReAdd_Task+0xae>
		/*Tail node, add to tail*/
		prev_node->next = new_node;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	e00c      	b.n	8001124 <SCH_ReAdd_Task+0xc8>
	}
	else{
		/*Add in mid*/
		prev_node->next = new_node;
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	611a      	str	r2, [r3, #16]
		new_node->next = tmp_node;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	611a      	str	r2, [r3, #16]
		while(travel_node != NULL){
			travel_node->Task.Delay = travel_node->Task.Delay - new_node->Task.Delay;

			travel_node = travel_node->next;
		}*/
		tmp_node->Task.Delay = tmp_node->Task.Delay - new_node->Task.Delay;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	1ad2      	subs	r2, r2, r3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	605a      	str	r2, [r3, #4]
	}

	size_list++;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <SCH_ReAdd_Task+0xdc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <SCH_ReAdd_Task+0xdc>)
 800112c:	6013      	str	r3, [r2, #0]
}
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000104 	.word	0x20000104
 8001138:	20000108 	.word	0x20000108

0800113c <SCH_Update>:

void SCH_Update(void){
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	if(taskList == NULL){
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <SCH_Update+0x48>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d016      	beq.n	8001178 <SCH_Update+0x3c>
		return;
	}

	Node_t* tmp = taskList;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <SCH_Update+0x48>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	607b      	str	r3, [r7, #4]

	if(tmp->Task.Delay > 0){
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <SCH_Update+0x28>
		tmp->Task.Delay--;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	e00a      	b.n	800117a <SCH_Update+0x3e>
	}
	else{
		//get_List();

		tmp->Task.Delay = tmp->Task.Period;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	605a      	str	r2, [r3, #4]
		tmp->Task.RunMe = tmp->Task.RunMe + 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	e000      	b.n	800117a <SCH_Update+0x3e>
		return;
 8001178:	bf00      	nop
	}
}
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000104 	.word	0x20000104

08001188 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
	Node_t* tmp = taskList;
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <SCH_Dispatch_Task+0x60>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	617b      	str	r3, [r7, #20]

	if(tmp == NULL){
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d022      	beq.n	80011e0 <SCH_Dispatch_Task+0x58>
		return;
	}

	if(tmp->Task.RunMe > 0){
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d01b      	beq.n	80011da <SCH_Dispatch_Task+0x52>
		tmp->Task.RunMe = tmp->Task.RunMe - 1;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	1e5a      	subs	r2, r3, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	60da      	str	r2, [r3, #12]

		/*Store task before delete*/
		void(*pTask)(void) = tmp->Task.pTask;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	613b      	str	r3, [r7, #16]
		uint32_t Delay = tmp->Task.Delay;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
		uint32_t Period = tmp->Task.Period;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	60bb      	str	r3, [r7, #8]
		uint32_t RunMe = tmp->Task.RunMe;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	607b      	str	r3, [r7, #4]

		//SCH_ReAdd_Task(tmp->Task.pTask, tmp->Task.Delay, tmp->Task.Period, tmp->Task.RunMe);
		SCH_Delete_Task();
 80011c4:	f000 f812 	bl	80011ec <SCH_Delete_Task>
		SCH_ReAdd_Task(pTask, Delay, Period, RunMe);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	6938      	ldr	r0, [r7, #16]
 80011d0:	f7ff ff44 	bl	800105c <SCH_ReAdd_Task>

		(*tmp->Task.pTask)();
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4798      	blx	r3
	}

	SCH_Report_Status();
 80011da:	f000 f82b 	bl	8001234 <SCH_Report_Status>
 80011de:	e000      	b.n	80011e2 <SCH_Dispatch_Task+0x5a>
		return;
 80011e0:	bf00      	nop
}
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000104 	.word	0x20000104

080011ec <SCH_Delete_Task>:

void SCH_Delete_Task(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	/*Delete head node because we using linking list*/
	Node_t* tmp = taskList;
 80011f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <SCH_Delete_Task+0x3c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	607b      	str	r3, [r7, #4]
	if(tmp == NULL){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d103      	bne.n	8001206 <SCH_Delete_Task+0x1a>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <SCH_Delete_Task+0x40>)
 8001200:	2208      	movs	r2, #8
 8001202:	701a      	strb	r2, [r3, #0]
		return;
 8001204:	e00c      	b.n	8001220 <SCH_Delete_Task+0x34>
	}

	taskList = taskList->next;
 8001206:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <SCH_Delete_Task+0x3c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	4a06      	ldr	r2, [pc, #24]	@ (8001228 <SCH_Delete_Task+0x3c>)
 800120e:	6013      	str	r3, [r2, #0]

	size_list--;
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <SCH_Delete_Task+0x44>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <SCH_Delete_Task+0x44>)
 8001218:	6013      	str	r3, [r2, #0]

	free(tmp);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f001 fcfc 	bl	8002c18 <free>
}
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000104 	.word	0x20000104
 800122c:	20000094 	.word	0x20000094
 8001230:	20000108 	.word	0x20000108

08001234 <SCH_Report_Status>:

void SCH_Report_Status(void){
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	#ifdef SCH_REPORT_ERRORS
		//ONLY APPLIES IF WE ARE REPORTING ERRORS
		// Check for a new error code
		if (Error_code_G != Last_error_code_G){
 8001238:	4b18      	ldr	r3, [pc, #96]	@ (800129c <SCH_Report_Status+0x68>)
 800123a:	781a      	ldrb	r2, [r3, #0]
 800123c:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <SCH_Report_Status+0x6c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d016      	beq.n	8001272 <SCH_Report_Status+0x3e>
			// Negative logic onLEDs assumed


			Error_port->ODR = 255 - Error_code_G;
 8001244:	4b15      	ldr	r3, [pc, #84]	@ (800129c <SCH_Report_Status+0x68>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <SCH_Report_Status+0x70>)
 800124e:	60da      	str	r2, [r3, #12]
			Last_error_code_G= Error_code_G;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <SCH_Report_Status+0x68>)
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <SCH_Report_Status+0x6c>)
 8001256:	701a      	strb	r2, [r3, #0]

			if (Error_code_G != 0){
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <SCH_Report_Status+0x68>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <SCH_Report_Status+0x36>
				Error_tick_count_G = 60000;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <SCH_Report_Status+0x74>)
 8001262:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001266:	601a      	str	r2, [r3, #0]
					Error_code_G = 0; // Reset error code
				}
			}
		}
	#endif
}
 8001268:	e013      	b.n	8001292 <SCH_Report_Status+0x5e>
				Error_tick_count_G = 0;
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <SCH_Report_Status+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	e00f      	b.n	8001292 <SCH_Report_Status+0x5e>
			if (Error_tick_count_G != 0){
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <SCH_Report_Status+0x74>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <SCH_Report_Status+0x5e>
				if (--Error_tick_count_G == 0) {
 800127a:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <SCH_Report_Status+0x74>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3b01      	subs	r3, #1
 8001280:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <SCH_Report_Status+0x74>)
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <SCH_Report_Status+0x74>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <SCH_Report_Status+0x5e>
					Error_code_G = 0; // Reset error code
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <SCH_Report_Status+0x68>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000094 	.word	0x20000094
 80012a0:	2000009c 	.word	0x2000009c
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	20000098 	.word	0x20000098

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_MspInit+0x5c>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <HAL_MspInit+0x5c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_MspInit+0x5c>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <HAL_MspInit+0x5c>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <HAL_MspInit+0x5c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <HAL_MspInit+0x5c>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_MspInit+0x60>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	4a04      	ldr	r2, [pc, #16]	@ (800130c <HAL_MspInit+0x60>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40021000 	.word	0x40021000
 800130c:	40010000 	.word	0x40010000

08001310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001320:	d113      	bne.n	800134a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <HAL_TIM_Base_MspInit+0x44>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <HAL_TIM_Base_MspInit+0x44>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_TIM_Base_MspInit+0x44>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	201c      	movs	r0, #28
 8001340:	f000 fac5 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001344:	201c      	movs	r0, #28
 8001346:	f000 fade 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <NMI_Handler+0x4>

08001360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <MemManage_Handler+0x4>

08001370 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <UsageFault_Handler+0x4>

08001380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f99e 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <TIM2_IRQHandler+0x10>)
 80013b6:	f001 f8e7 	bl	8002588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200000b8 	.word	0x200000b8

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f001 fcde 	bl	8002db4 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20002800 	.word	0x20002800
 8001424:	00000400 	.word	0x00000400
 8001428:	2000010c 	.word	0x2000010c
 800142c:	20000268 	.word	0x20000268

08001430 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <doRedGreen_Traffic>:
int Led24_Count = 3;

int state_traffic = RED_GREEN_STATE;
int time_flag = 0;

void doRedGreen_Traffic(void){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2108      	movs	r1, #8
 8001444:	480f      	ldr	r0, [pc, #60]	@ (8001484 <doRedGreen_Traffic+0x48>)
 8001446:	f000 fc0c 	bl	8001c62 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <doRedGreen_Traffic+0x48>)
 8001452:	f000 fc06 	bl	8001c62 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2120      	movs	r1, #32
 800145a:	480a      	ldr	r0, [pc, #40]	@ (8001484 <doRedGreen_Traffic+0x48>)
 800145c:	f000 fc01 	bl	8001c62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2110      	movs	r1, #16
 8001464:	4807      	ldr	r0, [pc, #28]	@ (8001484 <doRedGreen_Traffic+0x48>)
 8001466:	f000 fbfc 	bl	8001c62 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2140      	movs	r1, #64	@ 0x40
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <doRedGreen_Traffic+0x48>)
 8001470:	f000 fbf7 	bl	8001c62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2180      	movs	r1, #128	@ 0x80
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <doRedGreen_Traffic+0x48>)
 800147a:	f000 fbf2 	bl	8001c62 <HAL_GPIO_WritePin>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40010c00 	.word	0x40010c00

08001488 <doRedYellow_Traffic>:

void doRedYellow_Traffic(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <doRedYellow_Traffic+0x20>)
 8001494:	f000 fbe5 	bl	8001c62 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2180      	movs	r1, #128	@ 0x80
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <doRedYellow_Traffic+0x20>)
 800149e:	f000 fbe0 	bl	8001c62 <HAL_GPIO_WritePin>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40010c00 	.word	0x40010c00

080014ac <doGreenRed_Traffic>:

void doGreenRed_Traffic(void){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2108      	movs	r1, #8
 80014b4:	4809      	ldr	r0, [pc, #36]	@ (80014dc <doGreenRed_Traffic+0x30>)
 80014b6:	f000 fbd4 	bl	8001c62 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2180      	movs	r1, #128	@ 0x80
 80014be:	4807      	ldr	r0, [pc, #28]	@ (80014dc <doGreenRed_Traffic+0x30>)
 80014c0:	f000 fbcf 	bl	8001c62 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2140      	movs	r1, #64	@ 0x40
 80014c8:	4804      	ldr	r0, [pc, #16]	@ (80014dc <doGreenRed_Traffic+0x30>)
 80014ca:	f000 fbca 	bl	8001c62 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2120      	movs	r1, #32
 80014d2:	4802      	ldr	r0, [pc, #8]	@ (80014dc <doGreenRed_Traffic+0x30>)
 80014d4:	f000 fbc5 	bl	8001c62 <HAL_GPIO_WritePin>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40010c00 	.word	0x40010c00

080014e0 <doYellowRed_Traffic>:

void doYellowRed_Traffic(void){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2120      	movs	r1, #32
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <doYellowRed_Traffic+0x28>)
 80014ea:	f000 fbba 	bl	8001c62 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <doYellowRed_Traffic+0x28>)
 80014f4:	f000 fbb5 	bl	8001c62 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2140      	movs	r1, #64	@ 0x40
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <doYellowRed_Traffic+0x28>)
 80014fe:	f000 fbb0 	bl	8001c62 <HAL_GPIO_WritePin>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40010c00 	.word	0x40010c00

0800150c <getTimeFlag>:

int getTimeFlag(void){
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	return time_flag;
 8001510:	4b02      	ldr	r3, [pc, #8]	@ (800151c <getTimeFlag+0x10>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000114 	.word	0x20000114

08001520 <clearTimeFlag>:

void clearTimeFlag(void){
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	time_flag = 0;
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <clearTimeFlag+0x14>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000114 	.word	0x20000114

08001538 <runTime>:

void runTime(void){
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	time_flag = 1;
 800153c:	4b03      	ldr	r3, [pc, #12]	@ (800154c <runTime+0x14>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000114 	.word	0x20000114

08001550 <runTraffic>:

void runTraffic(void){
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	Led13_Count--;
 8001554:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <runTraffic+0xb4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a2a      	ldr	r2, [pc, #168]	@ (8001604 <runTraffic+0xb4>)
 800155c:	6013      	str	r3, [r2, #0]
	Led24_Count--;
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <runTraffic+0xb8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3b01      	subs	r3, #1
 8001564:	4a28      	ldr	r2, [pc, #160]	@ (8001608 <runTraffic+0xb8>)
 8001566:	6013      	str	r3, [r2, #0]

	if(Led13_Count == 2 && Led24_Count == 0){
 8001568:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <runTraffic+0xb4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d10a      	bne.n	8001586 <runTraffic+0x36>
 8001570:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <runTraffic+0xb8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d106      	bne.n	8001586 <runTraffic+0x36>
		Led24_Count = 2;
 8001578:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <runTraffic+0xb8>)
 800157a:	2202      	movs	r2, #2
 800157c:	601a      	str	r2, [r3, #0]
		state_traffic = RED_YELLOW_STATE;
 800157e:	4b23      	ldr	r3, [pc, #140]	@ (800160c <runTraffic+0xbc>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

		return;
 8001584:	e03a      	b.n	80015fc <runTraffic+0xac>
	}

	if(Led13_Count == 0 && Led24_Count == 0&& state_traffic == RED_YELLOW_STATE){
 8001586:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <runTraffic+0xb4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d111      	bne.n	80015b2 <runTraffic+0x62>
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <runTraffic+0xb8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10d      	bne.n	80015b2 <runTraffic+0x62>
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <runTraffic+0xbc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d109      	bne.n	80015b2 <runTraffic+0x62>
		Led13_Count = 3;
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <runTraffic+0xb4>)
 80015a0:	2203      	movs	r2, #3
 80015a2:	601a      	str	r2, [r3, #0]
		Led24_Count = 5;
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <runTraffic+0xb8>)
 80015a6:	2205      	movs	r2, #5
 80015a8:	601a      	str	r2, [r3, #0]
		state_traffic = GREEN_RED_STATE;
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <runTraffic+0xbc>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]

		return;
 80015b0:	e024      	b.n	80015fc <runTraffic+0xac>
	}

	if(Led24_Count == 2 && Led13_Count == 0){
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <runTraffic+0xb8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d10a      	bne.n	80015d0 <runTraffic+0x80>
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <runTraffic+0xb4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <runTraffic+0x80>
		state_traffic = YELLOW_RED_STATE;
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <runTraffic+0xbc>)
 80015c4:	2203      	movs	r2, #3
 80015c6:	601a      	str	r2, [r3, #0]
		Led13_Count = 2;
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <runTraffic+0xb4>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	601a      	str	r2, [r3, #0]

		return;
 80015ce:	e015      	b.n	80015fc <runTraffic+0xac>
	}

	if(Led13_Count == 0 && Led24_Count == 0&& state_traffic == YELLOW_RED_STATE){
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <runTraffic+0xb4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d111      	bne.n	80015fc <runTraffic+0xac>
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <runTraffic+0xb8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <runTraffic+0xac>
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <runTraffic+0xbc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d109      	bne.n	80015fc <runTraffic+0xac>
		Led13_Count = 5;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <runTraffic+0xb4>)
 80015ea:	2205      	movs	r2, #5
 80015ec:	601a      	str	r2, [r3, #0]
		Led24_Count = 3;
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <runTraffic+0xb8>)
 80015f0:	2203      	movs	r2, #3
 80015f2:	601a      	str	r2, [r3, #0]
		state_traffic = RED_GREEN_STATE;
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <runTraffic+0xbc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]

		return;
 80015fa:	bf00      	nop
	}
}
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000018 	.word	0x20000018
 8001608:	2000001c 	.word	0x2000001c
 800160c:	20000110 	.word	0x20000110

08001610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001610:	f7ff ff0e 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001614:	480b      	ldr	r0, [pc, #44]	@ (8001644 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001616:	490c      	ldr	r1, [pc, #48]	@ (8001648 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001618:	4a0c      	ldr	r2, [pc, #48]	@ (800164c <LoopFillZerobss+0x16>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a09      	ldr	r2, [pc, #36]	@ (8001650 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800162c:	4c09      	ldr	r4, [pc, #36]	@ (8001654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163a:	f001 fbc1 	bl	8002dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163e:	f7ff fb3b 	bl	8000cb8 <main>
  bx lr
 8001642:	4770      	bx	lr
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800164c:	08002ee0 	.word	0x08002ee0
  ldr r2, =_sbss
 8001650:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001654:	20000264 	.word	0x20000264

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f923 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fe18 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f93b 	bl	8001922 <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 f903 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000010 	.word	0x20000010
 80016e0:	20000024 	.word	0x20000024
 80016e4:	20000020 	.word	0x20000020

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_IncTick+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_IncTick+0x20>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a03      	ldr	r2, [pc, #12]	@ (8001708 <HAL_IncTick+0x20>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000024 	.word	0x20000024
 8001708:	20000118 	.word	0x20000118

0800170c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	@ (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000118 	.word	0x20000118

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4906      	ldr	r1, [pc, #24]	@ (80017b8 <__NVIC_EnableIRQ+0x34>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	@ (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	@ (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	@ 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	@ 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff90 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff2d 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff42 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff90 	bl	8001810 <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5f 	bl	80017bc <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff35 	bl	8001784 <__NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffa2 	bl	8001874 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b08b      	sub	sp, #44	@ 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e161      	b.n	8001c14 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001950:	2201      	movs	r2, #1
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 8150 	bne.w	8001c0e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a97      	ldr	r2, [pc, #604]	@ (8001bd0 <HAL_GPIO_Init+0x294>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d05e      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001978:	4a95      	ldr	r2, [pc, #596]	@ (8001bd0 <HAL_GPIO_Init+0x294>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d875      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800197e:	4a95      	ldr	r2, [pc, #596]	@ (8001bd4 <HAL_GPIO_Init+0x298>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d058      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001984:	4a93      	ldr	r2, [pc, #588]	@ (8001bd4 <HAL_GPIO_Init+0x298>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d86f      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800198a:	4a93      	ldr	r2, [pc, #588]	@ (8001bd8 <HAL_GPIO_Init+0x29c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d052      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001990:	4a91      	ldr	r2, [pc, #580]	@ (8001bd8 <HAL_GPIO_Init+0x29c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d869      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 8001996:	4a91      	ldr	r2, [pc, #580]	@ (8001bdc <HAL_GPIO_Init+0x2a0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d04c      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 800199c:	4a8f      	ldr	r2, [pc, #572]	@ (8001bdc <HAL_GPIO_Init+0x2a0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d863      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019a2:	4a8f      	ldr	r2, [pc, #572]	@ (8001be0 <HAL_GPIO_Init+0x2a4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d046      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 80019a8:	4a8d      	ldr	r2, [pc, #564]	@ (8001be0 <HAL_GPIO_Init+0x2a4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d85d      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d82a      	bhi.n	8001a08 <HAL_GPIO_Init+0xcc>
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d859      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019b6:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <HAL_GPIO_Init+0x80>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a11 	.word	0x08001a11
 80019c4:	08001a23 	.word	0x08001a23
 80019c8:	08001a65 	.word	0x08001a65
 80019cc:	08001a6b 	.word	0x08001a6b
 80019d0:	08001a6b 	.word	0x08001a6b
 80019d4:	08001a6b 	.word	0x08001a6b
 80019d8:	08001a6b 	.word	0x08001a6b
 80019dc:	08001a6b 	.word	0x08001a6b
 80019e0:	08001a6b 	.word	0x08001a6b
 80019e4:	08001a6b 	.word	0x08001a6b
 80019e8:	08001a6b 	.word	0x08001a6b
 80019ec:	08001a6b 	.word	0x08001a6b
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001a6b 	.word	0x08001a6b
 80019f8:	08001a6b 	.word	0x08001a6b
 80019fc:	08001a6b 	.word	0x08001a6b
 8001a00:	08001a19 	.word	0x08001a19
 8001a04:	08001a2d 	.word	0x08001a2d
 8001a08:	4a76      	ldr	r2, [pc, #472]	@ (8001be4 <HAL_GPIO_Init+0x2a8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a0e:	e02c      	b.n	8001a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e029      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e024      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	3308      	adds	r3, #8
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e01f      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	330c      	adds	r3, #12
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e01a      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	623b      	str	r3, [r7, #32]
          break;
 8001a42:	e013      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	611a      	str	r2, [r3, #16]
          break;
 8001a56:	e009      	b.n	8001a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	615a      	str	r2, [r3, #20]
          break;
 8001a62:	e003      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          break;
 8001a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2bff      	cmp	r3, #255	@ 0xff
 8001a70:	d801      	bhi.n	8001a76 <HAL_GPIO_Init+0x13a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_Init+0x13e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2bff      	cmp	r3, #255	@ 0xff
 8001a80:	d802      	bhi.n	8001a88 <HAL_GPIO_Init+0x14c>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x152>
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	3b08      	subs	r3, #8
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	210f      	movs	r1, #15
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	6a39      	ldr	r1, [r7, #32]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80a9 	beq.w	8001c0e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001abc:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <HAL_GPIO_Init+0x2ac>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a49      	ldr	r2, [pc, #292]	@ (8001be8 <HAL_GPIO_Init+0x2ac>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b47      	ldr	r3, [pc, #284]	@ (8001be8 <HAL_GPIO_Init+0x2ac>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ad4:	4a45      	ldr	r2, [pc, #276]	@ (8001bec <HAL_GPIO_Init+0x2b0>)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3d      	ldr	r2, [pc, #244]	@ (8001bf0 <HAL_GPIO_Init+0x2b4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00d      	beq.n	8001b1c <HAL_GPIO_Init+0x1e0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3c      	ldr	r2, [pc, #240]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d007      	beq.n	8001b18 <HAL_GPIO_Init+0x1dc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_GPIO_Init+0x1d8>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e004      	b.n	8001b1e <HAL_GPIO_Init+0x1e2>
 8001b14:	2303      	movs	r3, #3
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_Init+0x1e2>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_GPIO_Init+0x1e2>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b20:	f002 0203 	and.w	r2, r2, #3
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	4093      	lsls	r3, r2
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b2e:	492f      	ldr	r1, [pc, #188]	@ (8001bec <HAL_GPIO_Init+0x2b0>)
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	3302      	adds	r3, #2
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	492b      	ldr	r1, [pc, #172]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b56:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4927      	ldr	r1, [pc, #156]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b70:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	4921      	ldr	r1, [pc, #132]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	491d      	ldr	r1, [pc, #116]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b98:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4917      	ldr	r1, [pc, #92]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4913      	ldr	r1, [pc, #76]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01f      	beq.n	8001c00 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	490d      	ldr	r1, [pc, #52]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
 8001bcc:	e01f      	b.n	8001c0e <HAL_GPIO_Init+0x2d2>
 8001bce:	bf00      	nop
 8001bd0:	10320000 	.word	0x10320000
 8001bd4:	10310000 	.word	0x10310000
 8001bd8:	10220000 	.word	0x10220000
 8001bdc:	10210000 	.word	0x10210000
 8001be0:	10120000 	.word	0x10120000
 8001be4:	10110000 	.word	0x10110000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	40010800 	.word	0x40010800
 8001bf4:	40010c00 	.word	0x40010c00
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_GPIO_Init+0x2f4>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4909      	ldr	r1, [pc, #36]	@ (8001c30 <HAL_GPIO_Init+0x2f4>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	3301      	adds	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f47f ae96 	bne.w	8001950 <HAL_GPIO_Init+0x14>
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	372c      	adds	r7, #44	@ 0x2c
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	40010400 	.word	0x40010400

08001c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e001      	b.n	8001c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	807b      	strh	r3, [r7, #2]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c72:	787b      	ldrb	r3, [r7, #1]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c78:	887a      	ldrh	r2, [r7, #2]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c7e:	e003      	b.n	8001c88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	041a      	lsls	r2, r3, #16
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	611a      	str	r2, [r3, #16]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e272      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8087 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb4:	4b92      	ldr	r3, [pc, #584]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d00c      	beq.n	8001cda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc0:	4b8f      	ldr	r3, [pc, #572]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d112      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x5e>
 8001ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cda:	4b89      	ldr	r3, [pc, #548]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d06c      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x12c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d168      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e24c      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x76>
 8001cfc:	4b80      	ldr	r3, [pc, #512]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a7f      	ldr	r2, [pc, #508]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e02e      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x98>
 8001d12:	4b7b      	ldr	r3, [pc, #492]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7a      	ldr	r2, [pc, #488]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b78      	ldr	r3, [pc, #480]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a77      	ldr	r2, [pc, #476]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0xbc>
 8001d36:	4b72      	ldr	r3, [pc, #456]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a71      	ldr	r2, [pc, #452]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b6f      	ldr	r3, [pc, #444]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a6e      	ldr	r2, [pc, #440]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d50:	4b6b      	ldr	r3, [pc, #428]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6a      	ldr	r2, [pc, #424]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b68      	ldr	r3, [pc, #416]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a67      	ldr	r2, [pc, #412]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fccc 	bl	800170c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fcc8 	bl	800170c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	@ 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e200      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xe4>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fcb8 	bl	800170c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff fcb4 	bl	800170c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	@ 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e1ec      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	4b53      	ldr	r3, [pc, #332]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x10c>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d063      	beq.n	8001e96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dce:	4b4c      	ldr	r3, [pc, #304]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dda:	4b49      	ldr	r3, [pc, #292]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d11c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x18c>
 8001de6:	4b46      	ldr	r3, [pc, #280]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d116      	bne.n	8001e20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	4b43      	ldr	r3, [pc, #268]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_RCC_OscConfig+0x176>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e1c0      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4939      	ldr	r1, [pc, #228]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	e03a      	b.n	8001e96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d020      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e28:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fc6d 	bl	800170c <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e36:	f7ff fc69 	bl	800170c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e1a1      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	4b2d      	ldr	r3, [pc, #180]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e54:	4b2a      	ldr	r3, [pc, #168]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4927      	ldr	r1, [pc, #156]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
 8001e68:	e015      	b.n	8001e96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6a:	4b26      	ldr	r3, [pc, #152]	@ (8001f04 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff fc4c 	bl	800170c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e78:	f7ff fc48 	bl	800170c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e180      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03a      	beq.n	8001f18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d019      	beq.n	8001ede <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eaa:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <HAL_RCC_OscConfig+0x274>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fc2c 	bl	800170c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fc28 	bl	800170c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e160      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f000 fa9c 	bl	8002414 <RCC_Delay>
 8001edc:	e01c      	b.n	8001f18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fc12 	bl	800170c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eea:	e00f      	b.n	8001f0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff fc0e 	bl	800170c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d908      	bls.n	8001f0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e146      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	42420000 	.word	0x42420000
 8001f08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0c:	4b92      	ldr	r3, [pc, #584]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e9      	bne.n	8001eec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a6 	beq.w	8002072 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10d      	bne.n	8001f52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b88      	ldr	r3, [pc, #544]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a87      	ldr	r2, [pc, #540]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b85      	ldr	r3, [pc, #532]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	4b82      	ldr	r3, [pc, #520]	@ (800215c <HAL_RCC_OscConfig+0x4c8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d118      	bne.n	8001f90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800215c <HAL_RCC_OscConfig+0x4c8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a7e      	ldr	r2, [pc, #504]	@ (800215c <HAL_RCC_OscConfig+0x4c8>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fbcf 	bl	800170c <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7ff fbcb 	bl	800170c <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b64      	cmp	r3, #100	@ 0x64
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e103      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	4b75      	ldr	r3, [pc, #468]	@ (800215c <HAL_RCC_OscConfig+0x4c8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x312>
 8001f98:	4b6f      	ldr	r3, [pc, #444]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6213      	str	r3, [r2, #32]
 8001fa4:	e02d      	b.n	8002002 <HAL_RCC_OscConfig+0x36e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x334>
 8001fae:	4b6a      	ldr	r3, [pc, #424]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a69      	ldr	r2, [pc, #420]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	4b67      	ldr	r3, [pc, #412]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a66      	ldr	r2, [pc, #408]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	e01c      	b.n	8002002 <HAL_RCC_OscConfig+0x36e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d10c      	bne.n	8001fea <HAL_RCC_OscConfig+0x356>
 8001fd0:	4b61      	ldr	r3, [pc, #388]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a60      	ldr	r2, [pc, #384]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6213      	str	r3, [r2, #32]
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0x36e>
 8001fea:	4b5b      	ldr	r3, [pc, #364]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a5a      	ldr	r2, [pc, #360]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	4b58      	ldr	r3, [pc, #352]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a57      	ldr	r2, [pc, #348]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d015      	beq.n	8002036 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff fb7f 	bl	800170c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fb7b 	bl	800170c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0b1      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	4b4b      	ldr	r3, [pc, #300]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ee      	beq.n	8002012 <HAL_RCC_OscConfig+0x37e>
 8002034:	e014      	b.n	8002060 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff fb69 	bl	800170c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7ff fb65 	bl	800170c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e09b      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	4b40      	ldr	r3, [pc, #256]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ee      	bne.n	800203e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b3c      	ldr	r3, [pc, #240]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a3b      	ldr	r2, [pc, #236]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002070:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8087 	beq.w	800218a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207c:	4b36      	ldr	r3, [pc, #216]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d061      	beq.n	800214c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d146      	bne.n	800211e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fb39 	bl	800170c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209e:	f7ff fb35 	bl	800170c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e06d      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b0:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c4:	d108      	bne.n	80020d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020c6:	4b24      	ldr	r3, [pc, #144]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4921      	ldr	r1, [pc, #132]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a19      	ldr	r1, [r3, #32]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e8:	430b      	orrs	r3, r1
 80020ea:	491b      	ldr	r1, [pc, #108]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <HAL_RCC_OscConfig+0x4cc>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7ff fb09 	bl	800170c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7ff fb05 	bl	800170c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e03d      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x46a>
 800211c:	e035      	b.n	800218a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <HAL_RCC_OscConfig+0x4cc>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff faf2 	bl	800170c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff faee 	bl	800170c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e026      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x498>
 800214a:	e01e      	b.n	800218a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e019      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
 8002158:	40021000 	.word	0x40021000
 800215c:	40007000 	.word	0x40007000
 8002160:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_RCC_OscConfig+0x500>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	429a      	cmp	r2, r3
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000

08002198 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0d0      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d910      	bls.n	80021dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b67      	ldr	r3, [pc, #412]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0207 	bic.w	r2, r3, #7
 80021c2:	4965      	ldr	r1, [pc, #404]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b63      	ldr	r3, [pc, #396]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0b8      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d020      	beq.n	800222a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f4:	4b59      	ldr	r3, [pc, #356]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a58      	ldr	r2, [pc, #352]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800220c:	4b53      	ldr	r3, [pc, #332]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a52      	ldr	r2, [pc, #328]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002216:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b50      	ldr	r3, [pc, #320]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	494d      	ldr	r1, [pc, #308]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d040      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b47      	ldr	r3, [pc, #284]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d115      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e07f      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002256:	4b41      	ldr	r3, [pc, #260]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e073      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002266:	4b3d      	ldr	r3, [pc, #244]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06b      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002276:	4b39      	ldr	r3, [pc, #228]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f023 0203 	bic.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4936      	ldr	r1, [pc, #216]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002288:	f7ff fa40 	bl	800170c <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002290:	f7ff fa3c 	bl	800170c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e053      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 020c 	and.w	r2, r3, #12
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d1eb      	bne.n	8002290 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d210      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b24      	ldr	r3, [pc, #144]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0207 	bic.w	r2, r3, #7
 80022ce:	4922      	ldr	r1, [pc, #136]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e032      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f4:	4b19      	ldr	r3, [pc, #100]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4916      	ldr	r1, [pc, #88]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002312:	4b12      	ldr	r3, [pc, #72]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	490e      	ldr	r1, [pc, #56]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002326:	f000 f821 	bl	800236c <HAL_RCC_GetSysClockFreq>
 800232a:	4602      	mov	r2, r0
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	490a      	ldr	r1, [pc, #40]	@ (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	5ccb      	ldrb	r3, [r1, r3]
 800233a:	fa22 f303 	lsr.w	r3, r2, r3
 800233e:	4a09      	ldr	r2, [pc, #36]	@ (8002364 <HAL_RCC_ClockConfig+0x1cc>)
 8002340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <HAL_RCC_ClockConfig+0x1d0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f99e 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40022000 	.word	0x40022000
 800235c:	40021000 	.word	0x40021000
 8002360:	08002eb4 	.word	0x08002eb4
 8002364:	20000010 	.word	0x20000010
 8002368:	20000020 	.word	0x20000020

0800236c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002386:	4b1e      	ldr	r3, [pc, #120]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x94>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d002      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x30>
 8002396:	2b08      	cmp	r3, #8
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x36>
 800239a:	e027      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800239c:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x98>)
 800239e:	613b      	str	r3, [r7, #16]
      break;
 80023a0:	e027      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	0c9b      	lsrs	r3, r3, #18
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	4a17      	ldr	r2, [pc, #92]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023ac:	5cd3      	ldrb	r3, [r2, r3]
 80023ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d010      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x94>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0c5b      	lsrs	r3, r3, #17
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	4a11      	ldr	r2, [pc, #68]	@ (800240c <HAL_RCC_GetSysClockFreq+0xa0>)
 80023c6:	5cd3      	ldrb	r3, [r2, r3]
 80023c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ce:	fb03 f202 	mul.w	r2, r3, r2
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	e004      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0c      	ldr	r2, [pc, #48]	@ (8002410 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	613b      	str	r3, [r7, #16]
      break;
 80023ea:	e002      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ee:	613b      	str	r3, [r7, #16]
      break;
 80023f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f2:	693b      	ldr	r3, [r7, #16]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	007a1200 	.word	0x007a1200
 8002408:	08002ec4 	.word	0x08002ec4
 800240c:	08002ed4 	.word	0x08002ed4
 8002410:	003d0900 	.word	0x003d0900

08002414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800241c:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <RCC_Delay+0x34>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <RCC_Delay+0x38>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0a5b      	lsrs	r3, r3, #9
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002430:	bf00      	nop
  }
  while (Delay --);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1e5a      	subs	r2, r3, #1
 8002436:	60fa      	str	r2, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f9      	bne.n	8002430 <RCC_Delay+0x1c>
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	20000010 	.word	0x20000010
 800244c:	10624dd3 	.word	0x10624dd3

08002450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e041      	b.n	80024e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe ff4a 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f000 fa56 	bl	8002940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d001      	beq.n	8002508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e035      	b.n	8002574 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a16      	ldr	r2, [pc, #88]	@ (8002580 <HAL_TIM_Base_Start_IT+0x90>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_TIM_Base_Start_IT+0x4e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002532:	d004      	beq.n	800253e <HAL_TIM_Base_Start_IT+0x4e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a12      	ldr	r2, [pc, #72]	@ (8002584 <HAL_TIM_Base_Start_IT+0x94>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d111      	bne.n	8002562 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b06      	cmp	r3, #6
 800254e:	d010      	beq.n	8002572 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002560:	e007      	b.n	8002572 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400

08002588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d020      	beq.n	80025ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01b      	beq.n	80025ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0202 	mvn.w	r2, #2
 80025bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f998 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f98b 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f99a 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d020      	beq.n	8002638 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0204 	mvn.w	r2, #4
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f972 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f965 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f974 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d020      	beq.n	8002684 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0208 	mvn.w	r2, #8
 8002654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2204      	movs	r2, #4
 800265a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f94c 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f93f 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f94e 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d020      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01b      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0210 	mvn.w	r2, #16
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2208      	movs	r2, #8
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f926 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f919 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f928 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00c      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0201 	mvn.w	r2, #1
 80026ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe fad6 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00c      	beq.n	8002718 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa6f 	bl	8002bf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8f8 	bl	800292c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0220 	mvn.w	r2, #32
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa42 	bl	8002be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_TIM_ConfigClockSource+0x1c>
 8002780:	2302      	movs	r3, #2
 8002782:	e0b4      	b.n	80028ee <HAL_TIM_ConfigClockSource+0x186>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027bc:	d03e      	beq.n	800283c <HAL_TIM_ConfigClockSource+0xd4>
 80027be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c2:	f200 8087 	bhi.w	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ca:	f000 8086 	beq.w	80028da <HAL_TIM_ConfigClockSource+0x172>
 80027ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d2:	d87f      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b70      	cmp	r3, #112	@ 0x70
 80027d6:	d01a      	beq.n	800280e <HAL_TIM_ConfigClockSource+0xa6>
 80027d8:	2b70      	cmp	r3, #112	@ 0x70
 80027da:	d87b      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b60      	cmp	r3, #96	@ 0x60
 80027de:	d050      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x11a>
 80027e0:	2b60      	cmp	r3, #96	@ 0x60
 80027e2:	d877      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b50      	cmp	r3, #80	@ 0x50
 80027e6:	d03c      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xfa>
 80027e8:	2b50      	cmp	r3, #80	@ 0x50
 80027ea:	d873      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b40      	cmp	r3, #64	@ 0x40
 80027ee:	d058      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x13a>
 80027f0:	2b40      	cmp	r3, #64	@ 0x40
 80027f2:	d86f      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b30      	cmp	r3, #48	@ 0x30
 80027f6:	d064      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 80027f8:	2b30      	cmp	r3, #48	@ 0x30
 80027fa:	d86b      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d060      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002800:	2b20      	cmp	r3, #32
 8002802:	d867      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05c      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002808:	2b10      	cmp	r3, #16
 800280a:	d05a      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	e062      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800281e:	f000 f96a 	bl	8002af6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	609a      	str	r2, [r3, #8]
      break;
 800283a:	e04f      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800284c:	f000 f953 	bl	8002af6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800285e:	609a      	str	r2, [r3, #8]
      break;
 8002860:	e03c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	461a      	mov	r2, r3
 8002870:	f000 f8ca 	bl	8002a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2150      	movs	r1, #80	@ 0x50
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f921 	bl	8002ac2 <TIM_ITRx_SetConfig>
      break;
 8002880:	e02c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800288e:	461a      	mov	r2, r3
 8002890:	f000 f8e8 	bl	8002a64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2160      	movs	r1, #96	@ 0x60
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f911 	bl	8002ac2 <TIM_ITRx_SetConfig>
      break;
 80028a0:	e01c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ae:	461a      	mov	r2, r3
 80028b0:	f000 f8aa 	bl	8002a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2140      	movs	r1, #64	@ 0x40
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f901 	bl	8002ac2 <TIM_ITRx_SetConfig>
      break;
 80028c0:	e00c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4610      	mov	r0, r2
 80028ce:	f000 f8f8 	bl	8002ac2 <TIM_ITRx_SetConfig>
      break;
 80028d2:	e003      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      break;
 80028d8:	e000      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
	...

08002940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a2b      	ldr	r2, [pc, #172]	@ (8002a00 <TIM_Base_SetConfig+0xc0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <TIM_Base_SetConfig+0x28>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800295e:	d003      	beq.n	8002968 <TIM_Base_SetConfig+0x28>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <TIM_Base_SetConfig+0xc4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d108      	bne.n	800297a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800296e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a20      	ldr	r2, [pc, #128]	@ (8002a00 <TIM_Base_SetConfig+0xc0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d007      	beq.n	8002992 <TIM_Base_SetConfig+0x52>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002988:	d003      	beq.n	8002992 <TIM_Base_SetConfig+0x52>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <TIM_Base_SetConfig+0xc4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d108      	bne.n	80029a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <TIM_Base_SetConfig+0xc0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d103      	bne.n	80029d8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f023 0201 	bic.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]
  }
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40000400 	.word	0x40000400

08002a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f023 0201 	bic.w	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f023 030a 	bic.w	r3, r3, #10
 8002a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	621a      	str	r2, [r3, #32]
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f023 0210 	bic.w	r2, r3, #16
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	031b      	lsls	r3, r3, #12
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	621a      	str	r2, [r3, #32]
}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f043 0307 	orr.w	r3, r3, #7
 8002ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b087      	sub	sp, #28
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	021a      	lsls	r2, r3, #8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	609a      	str	r2, [r3, #8]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e041      	b.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a14      	ldr	r2, [pc, #80]	@ (8002bdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d009      	beq.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b98:	d004      	beq.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a10      	ldr	r2, [pc, #64]	@ (8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10c      	bne.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002baa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40000400 	.word	0x40000400

08002be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <malloc>:
 8002c08:	4b02      	ldr	r3, [pc, #8]	@ (8002c14 <malloc+0xc>)
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	f000 b82d 	b.w	8002c6c <_malloc_r>
 8002c12:	bf00      	nop
 8002c14:	20000028 	.word	0x20000028

08002c18 <free>:
 8002c18:	4b02      	ldr	r3, [pc, #8]	@ (8002c24 <free+0xc>)
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	f000 b8f5 	b.w	8002e0c <_free_r>
 8002c22:	bf00      	nop
 8002c24:	20000028 	.word	0x20000028

08002c28 <sbrk_aligned>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8002c68 <sbrk_aligned+0x40>)
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	6831      	ldr	r1, [r6, #0]
 8002c30:	4605      	mov	r5, r0
 8002c32:	b911      	cbnz	r1, 8002c3a <sbrk_aligned+0x12>
 8002c34:	f000 f8ae 	bl	8002d94 <_sbrk_r>
 8002c38:	6030      	str	r0, [r6, #0]
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f000 f8a9 	bl	8002d94 <_sbrk_r>
 8002c42:	1c43      	adds	r3, r0, #1
 8002c44:	d103      	bne.n	8002c4e <sbrk_aligned+0x26>
 8002c46:	f04f 34ff 	mov.w	r4, #4294967295
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	bd70      	pop	{r4, r5, r6, pc}
 8002c4e:	1cc4      	adds	r4, r0, #3
 8002c50:	f024 0403 	bic.w	r4, r4, #3
 8002c54:	42a0      	cmp	r0, r4
 8002c56:	d0f8      	beq.n	8002c4a <sbrk_aligned+0x22>
 8002c58:	1a21      	subs	r1, r4, r0
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f000 f89a 	bl	8002d94 <_sbrk_r>
 8002c60:	3001      	adds	r0, #1
 8002c62:	d1f2      	bne.n	8002c4a <sbrk_aligned+0x22>
 8002c64:	e7ef      	b.n	8002c46 <sbrk_aligned+0x1e>
 8002c66:	bf00      	nop
 8002c68:	2000011c 	.word	0x2000011c

08002c6c <_malloc_r>:
 8002c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c70:	1ccd      	adds	r5, r1, #3
 8002c72:	f025 0503 	bic.w	r5, r5, #3
 8002c76:	3508      	adds	r5, #8
 8002c78:	2d0c      	cmp	r5, #12
 8002c7a:	bf38      	it	cc
 8002c7c:	250c      	movcc	r5, #12
 8002c7e:	2d00      	cmp	r5, #0
 8002c80:	4606      	mov	r6, r0
 8002c82:	db01      	blt.n	8002c88 <_malloc_r+0x1c>
 8002c84:	42a9      	cmp	r1, r5
 8002c86:	d904      	bls.n	8002c92 <_malloc_r+0x26>
 8002c88:	230c      	movs	r3, #12
 8002c8a:	6033      	str	r3, [r6, #0]
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d68 <_malloc_r+0xfc>
 8002c96:	f000 f869 	bl	8002d6c <__malloc_lock>
 8002c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c9e:	461c      	mov	r4, r3
 8002ca0:	bb44      	cbnz	r4, 8002cf4 <_malloc_r+0x88>
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f7ff ffbf 	bl	8002c28 <sbrk_aligned>
 8002caa:	1c43      	adds	r3, r0, #1
 8002cac:	4604      	mov	r4, r0
 8002cae:	d158      	bne.n	8002d62 <_malloc_r+0xf6>
 8002cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8002cb4:	4627      	mov	r7, r4
 8002cb6:	2f00      	cmp	r7, #0
 8002cb8:	d143      	bne.n	8002d42 <_malloc_r+0xd6>
 8002cba:	2c00      	cmp	r4, #0
 8002cbc:	d04b      	beq.n	8002d56 <_malloc_r+0xea>
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	4639      	mov	r1, r7
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	eb04 0903 	add.w	r9, r4, r3
 8002cc8:	f000 f864 	bl	8002d94 <_sbrk_r>
 8002ccc:	4581      	cmp	r9, r0
 8002cce:	d142      	bne.n	8002d56 <_malloc_r+0xea>
 8002cd0:	6821      	ldr	r1, [r4, #0]
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	1a6d      	subs	r5, r5, r1
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	f7ff ffa6 	bl	8002c28 <sbrk_aligned>
 8002cdc:	3001      	adds	r0, #1
 8002cde:	d03a      	beq.n	8002d56 <_malloc_r+0xea>
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	442b      	add	r3, r5
 8002ce4:	6023      	str	r3, [r4, #0]
 8002ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	bb62      	cbnz	r2, 8002d48 <_malloc_r+0xdc>
 8002cee:	f8c8 7000 	str.w	r7, [r8]
 8002cf2:	e00f      	b.n	8002d14 <_malloc_r+0xa8>
 8002cf4:	6822      	ldr	r2, [r4, #0]
 8002cf6:	1b52      	subs	r2, r2, r5
 8002cf8:	d420      	bmi.n	8002d3c <_malloc_r+0xd0>
 8002cfa:	2a0b      	cmp	r2, #11
 8002cfc:	d917      	bls.n	8002d2e <_malloc_r+0xc2>
 8002cfe:	1961      	adds	r1, r4, r5
 8002d00:	42a3      	cmp	r3, r4
 8002d02:	6025      	str	r5, [r4, #0]
 8002d04:	bf18      	it	ne
 8002d06:	6059      	strne	r1, [r3, #4]
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	bf08      	it	eq
 8002d0c:	f8c8 1000 	streq.w	r1, [r8]
 8002d10:	5162      	str	r2, [r4, r5]
 8002d12:	604b      	str	r3, [r1, #4]
 8002d14:	4630      	mov	r0, r6
 8002d16:	f000 f82f 	bl	8002d78 <__malloc_unlock>
 8002d1a:	f104 000b 	add.w	r0, r4, #11
 8002d1e:	1d23      	adds	r3, r4, #4
 8002d20:	f020 0007 	bic.w	r0, r0, #7
 8002d24:	1ac2      	subs	r2, r0, r3
 8002d26:	bf1c      	itt	ne
 8002d28:	1a1b      	subne	r3, r3, r0
 8002d2a:	50a3      	strne	r3, [r4, r2]
 8002d2c:	e7af      	b.n	8002c8e <_malloc_r+0x22>
 8002d2e:	6862      	ldr	r2, [r4, #4]
 8002d30:	42a3      	cmp	r3, r4
 8002d32:	bf0c      	ite	eq
 8002d34:	f8c8 2000 	streq.w	r2, [r8]
 8002d38:	605a      	strne	r2, [r3, #4]
 8002d3a:	e7eb      	b.n	8002d14 <_malloc_r+0xa8>
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	6864      	ldr	r4, [r4, #4]
 8002d40:	e7ae      	b.n	8002ca0 <_malloc_r+0x34>
 8002d42:	463c      	mov	r4, r7
 8002d44:	687f      	ldr	r7, [r7, #4]
 8002d46:	e7b6      	b.n	8002cb6 <_malloc_r+0x4a>
 8002d48:	461a      	mov	r2, r3
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	42a3      	cmp	r3, r4
 8002d4e:	d1fb      	bne.n	8002d48 <_malloc_r+0xdc>
 8002d50:	2300      	movs	r3, #0
 8002d52:	6053      	str	r3, [r2, #4]
 8002d54:	e7de      	b.n	8002d14 <_malloc_r+0xa8>
 8002d56:	230c      	movs	r3, #12
 8002d58:	4630      	mov	r0, r6
 8002d5a:	6033      	str	r3, [r6, #0]
 8002d5c:	f000 f80c 	bl	8002d78 <__malloc_unlock>
 8002d60:	e794      	b.n	8002c8c <_malloc_r+0x20>
 8002d62:	6005      	str	r5, [r0, #0]
 8002d64:	e7d6      	b.n	8002d14 <_malloc_r+0xa8>
 8002d66:	bf00      	nop
 8002d68:	20000120 	.word	0x20000120

08002d6c <__malloc_lock>:
 8002d6c:	4801      	ldr	r0, [pc, #4]	@ (8002d74 <__malloc_lock+0x8>)
 8002d6e:	f000 b84b 	b.w	8002e08 <__retarget_lock_acquire_recursive>
 8002d72:	bf00      	nop
 8002d74:	20000260 	.word	0x20000260

08002d78 <__malloc_unlock>:
 8002d78:	4801      	ldr	r0, [pc, #4]	@ (8002d80 <__malloc_unlock+0x8>)
 8002d7a:	f000 b846 	b.w	8002e0a <__retarget_lock_release_recursive>
 8002d7e:	bf00      	nop
 8002d80:	20000260 	.word	0x20000260

08002d84 <memset>:
 8002d84:	4603      	mov	r3, r0
 8002d86:	4402      	add	r2, r0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <memset+0xa>
 8002d8c:	4770      	bx	lr
 8002d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d92:	e7f9      	b.n	8002d88 <memset+0x4>

08002d94 <_sbrk_r>:
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	2300      	movs	r3, #0
 8002d98:	4d05      	ldr	r5, [pc, #20]	@ (8002db0 <_sbrk_r+0x1c>)
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	602b      	str	r3, [r5, #0]
 8002da0:	f7fe fb10 	bl	80013c4 <_sbrk>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d102      	bne.n	8002dae <_sbrk_r+0x1a>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	b103      	cbz	r3, 8002dae <_sbrk_r+0x1a>
 8002dac:	6023      	str	r3, [r4, #0]
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
 8002db0:	2000025c 	.word	0x2000025c

08002db4 <__errno>:
 8002db4:	4b01      	ldr	r3, [pc, #4]	@ (8002dbc <__errno+0x8>)
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000028 	.word	0x20000028

08002dc0 <__libc_init_array>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	4d0c      	ldr	r5, [pc, #48]	@ (8002df8 <__libc_init_array+0x38>)
 8002dc6:	4c0d      	ldr	r4, [pc, #52]	@ (8002dfc <__libc_init_array+0x3c>)
 8002dc8:	1b64      	subs	r4, r4, r5
 8002dca:	10a4      	asrs	r4, r4, #2
 8002dcc:	42a6      	cmp	r6, r4
 8002dce:	d109      	bne.n	8002de4 <__libc_init_array+0x24>
 8002dd0:	f000 f864 	bl	8002e9c <_init>
 8002dd4:	2600      	movs	r6, #0
 8002dd6:	4d0a      	ldr	r5, [pc, #40]	@ (8002e00 <__libc_init_array+0x40>)
 8002dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002e04 <__libc_init_array+0x44>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	42a6      	cmp	r6, r4
 8002de0:	d105      	bne.n	8002dee <__libc_init_array+0x2e>
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de8:	4798      	blx	r3
 8002dea:	3601      	adds	r6, #1
 8002dec:	e7ee      	b.n	8002dcc <__libc_init_array+0xc>
 8002dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df2:	4798      	blx	r3
 8002df4:	3601      	adds	r6, #1
 8002df6:	e7f2      	b.n	8002dde <__libc_init_array+0x1e>
 8002df8:	08002ed8 	.word	0x08002ed8
 8002dfc:	08002ed8 	.word	0x08002ed8
 8002e00:	08002ed8 	.word	0x08002ed8
 8002e04:	08002edc 	.word	0x08002edc

08002e08 <__retarget_lock_acquire_recursive>:
 8002e08:	4770      	bx	lr

08002e0a <__retarget_lock_release_recursive>:
 8002e0a:	4770      	bx	lr

08002e0c <_free_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4605      	mov	r5, r0
 8002e10:	2900      	cmp	r1, #0
 8002e12:	d040      	beq.n	8002e96 <_free_r+0x8a>
 8002e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e18:	1f0c      	subs	r4, r1, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bfb8      	it	lt
 8002e1e:	18e4      	addlt	r4, r4, r3
 8002e20:	f7ff ffa4 	bl	8002d6c <__malloc_lock>
 8002e24:	4a1c      	ldr	r2, [pc, #112]	@ (8002e98 <_free_r+0x8c>)
 8002e26:	6813      	ldr	r3, [r2, #0]
 8002e28:	b933      	cbnz	r3, 8002e38 <_free_r+0x2c>
 8002e2a:	6063      	str	r3, [r4, #4]
 8002e2c:	6014      	str	r4, [r2, #0]
 8002e2e:	4628      	mov	r0, r5
 8002e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e34:	f7ff bfa0 	b.w	8002d78 <__malloc_unlock>
 8002e38:	42a3      	cmp	r3, r4
 8002e3a:	d908      	bls.n	8002e4e <_free_r+0x42>
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	1821      	adds	r1, r4, r0
 8002e40:	428b      	cmp	r3, r1
 8002e42:	bf01      	itttt	eq
 8002e44:	6819      	ldreq	r1, [r3, #0]
 8002e46:	685b      	ldreq	r3, [r3, #4]
 8002e48:	1809      	addeq	r1, r1, r0
 8002e4a:	6021      	streq	r1, [r4, #0]
 8002e4c:	e7ed      	b.n	8002e2a <_free_r+0x1e>
 8002e4e:	461a      	mov	r2, r3
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b10b      	cbz	r3, 8002e58 <_free_r+0x4c>
 8002e54:	42a3      	cmp	r3, r4
 8002e56:	d9fa      	bls.n	8002e4e <_free_r+0x42>
 8002e58:	6811      	ldr	r1, [r2, #0]
 8002e5a:	1850      	adds	r0, r2, r1
 8002e5c:	42a0      	cmp	r0, r4
 8002e5e:	d10b      	bne.n	8002e78 <_free_r+0x6c>
 8002e60:	6820      	ldr	r0, [r4, #0]
 8002e62:	4401      	add	r1, r0
 8002e64:	1850      	adds	r0, r2, r1
 8002e66:	4283      	cmp	r3, r0
 8002e68:	6011      	str	r1, [r2, #0]
 8002e6a:	d1e0      	bne.n	8002e2e <_free_r+0x22>
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4408      	add	r0, r1
 8002e72:	6010      	str	r0, [r2, #0]
 8002e74:	6053      	str	r3, [r2, #4]
 8002e76:	e7da      	b.n	8002e2e <_free_r+0x22>
 8002e78:	d902      	bls.n	8002e80 <_free_r+0x74>
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	602b      	str	r3, [r5, #0]
 8002e7e:	e7d6      	b.n	8002e2e <_free_r+0x22>
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	1821      	adds	r1, r4, r0
 8002e84:	428b      	cmp	r3, r1
 8002e86:	bf01      	itttt	eq
 8002e88:	6819      	ldreq	r1, [r3, #0]
 8002e8a:	685b      	ldreq	r3, [r3, #4]
 8002e8c:	1809      	addeq	r1, r1, r0
 8002e8e:	6021      	streq	r1, [r4, #0]
 8002e90:	6063      	str	r3, [r4, #4]
 8002e92:	6054      	str	r4, [r2, #4]
 8002e94:	e7cb      	b.n	8002e2e <_free_r+0x22>
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
 8002e98:	20000120 	.word	0x20000120

08002e9c <_init>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr

08002ea8 <_fini>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr
